Opening output files
FE:EMIT_FILE xed/build/obj/xed-operand-ctype-enum.txt
FE:EMIT_FILE xed/build/obj/xed-operand-ctype-enum.c
FE:EMIT_FILE xed/build/obj/xed-operand-ctype-enum.h
FE:EMIT_FILE xed/build/obj/xed-operand-ctype-map.h
FE:EMIT_FILE xed/build/obj/xed-operand-ctype-map.c
LER: Comparing YMM0 and ZMM0 for XMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for XMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for XMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for XMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for XMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for XMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for XMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for XMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for XMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for XMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for XMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for XMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for XMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for XMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for XMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for XMM15
	taking new wider version
LER: Comparing YMM0 and ZMM0 for YMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for YMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for YMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for YMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for YMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for YMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for YMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for YMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for YMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for YMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for YMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for YMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for YMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for YMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for YMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for YMM15
	taking new wider version
[RGROUPS] ['BNDCFG', 'BNDSTAT', 'BOUND', 'CR', 'DR', 'FLAGS', 'GPR16', 'GPR32', 'GPR64', 'GPR8', 'GPR8h', 'INVALID', 'IP', 'MASK', 'MMX', 'MSR', 'MXCSR', 'PSEUDO', 'PSEUDOX87', 'SR', 'TMP', 'TREG', 'UIF', 'X87', 'XCR', 'XMM', 'YMM', 'ZMM']
FE:EMIT_FILE xed/build/obj/xed-reg-enum.txt
FE:EMIT_FILE xed/build/obj/xed-reg-enum.c
FE:EMIT_FILE xed/build/obj/xed-reg-enum.h
FE:EMIT_FILE xed/build/obj/xed-reg-class-enum.txt
FE:EMIT_FILE xed/build/obj/xed-reg-class-enum.c
FE:EMIT_FILE xed/build/obj/xed-reg-class-enum.h
FE:EMIT_FILE xed/build/obj/xed-init-reg-class.c
FE:EMIT_FILE xed/build/obj/xed-operand-width-enum.txt
FE:EMIT_FILE xed/build/obj/xed-operand-width-enum.c
FE:EMIT_FILE xed/build/obj/xed-operand-width-enum.h
FE:EMIT_FILE xed/build/obj/xed-init-width.c
Adding scalable width:  ASZ
Adding scalable width:  SSZ
Adding scalable width:  P
Adding scalable width:  P2
Adding scalable width:  S
Adding scalable width:  V
Adding scalable width:  Y
Adding scalable width:  Z
Adding scalable width:  SPW8
Adding scalable width:  SPW
Adding scalable width:  SPW5
Adding scalable width:  SPW3
Adding scalable width:  SPW2
MAKING ELEMENT BASE TYPE ENUM
FE:EMIT_FILE xed/build/obj/xed-operand-element-type-enum.c
FE:EMIT_FILE xed/build/obj/xed-operand-element-type-enum.h
FE:EMIT_FILE xed/build/obj/xed-operand-element-xtype-enum.txt
FE:EMIT_FILE xed/build/obj/xed-operand-element-xtype-enum.c
FE:EMIT_FILE xed/build/obj/xed-operand-element-xtype-enum.h
FE:EMIT_FILE xed/build/obj/xed-init-operand-type-mappings.c
FE:EMIT_FILE xed/build/obj/xed-init-pointer-names.h
FE:EMIT_FILE xed/build/obj/xed-init-pointer-names.c
Reading state bits
Done reading state bits
Reading structured input
Reading Instructions (ISA) input
=============================================
Creating a generator 0
=============================================
ALines (lines before reading input) = 65501
read_input 0
NONTERMINAL: ISA notype
Adding ISA to nonterminal dict
Nonterminal ISA()::
Nonterminal name ISA
read_flat_input 0
Hit a nonterminal, returning at: REMOVE_SEGMENT()::
BLines (lines remaining after reading input) = 65499
=============================================
Creating a generator 1
=============================================
ALines (lines before reading input) = 65499
read_input 1
NONTERMINAL: REMOVE_SEGMENT notype
Adding REMOVE_SEGMENT to nonterminal dict
Nonterminal REMOVE_SEGMENT()::
Nonterminal name REMOVE_SEGMENT
read_flat_input 1
Hit a nonterminal, returning at: PREFIXES()::
BLines (lines remaining after reading input) = 65495
=============================================
Creating a generator 2
=============================================
ALines (lines before reading input) = 65495
read_input 4
NONTERMINAL: PREFIXES notype
Adding PREFIXES to nonterminal dict
Nonterminal PREFIXES()::
Nonterminal name PREFIXES
read_flat_input 4
Hit a nonterminal, returning at: BRANCH_HINT()::
BLines (lines remaining after reading input) = 65447
=============================================
Creating a generator 3
=============================================
ALines (lines before reading input) = 65447
read_input 50
NONTERMINAL: BRANCH_HINT notype
Adding BRANCH_HINT to nonterminal dict
Nonterminal BRANCH_HINT()::
Nonterminal name BRANCH_HINT
read_flat_input 50
Hit a nonterminal, returning at: CET_NO_TRACK()::
BLines (lines remaining after reading input) = 65443
=============================================
Creating a generator 4
=============================================
ALines (lines before reading input) = 65443
read_input 53
NONTERMINAL: CET_NO_TRACK notype
Adding CET_NO_TRACK to nonterminal dict
Nonterminal CET_NO_TRACK()::
Nonterminal name CET_NO_TRACK
read_flat_input 53
Hit a nonterminal, returning at: xed_reg_enum_t ArAX()::
BLines (lines remaining after reading input) = 65439
=============================================
Creating a generator 5
=============================================
ALines (lines before reading input) = 65439
read_input 56
NONTERMINAL: ArAX type= xed_reg_enum_t
Adding ArAX to nonterminal dict
Nonterminal xed_reg_enum_t ArAX()::
Nonterminal name ArAX
read_flat_input 56
Hit a nonterminal, returning at: xed_reg_enum_t ArBX()::
BLines (lines remaining after reading input) = 65435
=============================================
Creating a generator 6
=============================================
ALines (lines before reading input) = 65435
read_input 59
NONTERMINAL: ArBX type= xed_reg_enum_t
Adding ArBX to nonterminal dict
Nonterminal xed_reg_enum_t ArBX()::
Nonterminal name ArBX
read_flat_input 59
Hit a nonterminal, returning at: xed_reg_enum_t ArCX()::
BLines (lines remaining after reading input) = 65431
=============================================
Creating a generator 7
=============================================
ALines (lines before reading input) = 65431
read_input 62
NONTERMINAL: ArCX type= xed_reg_enum_t
Adding ArCX to nonterminal dict
Nonterminal xed_reg_enum_t ArCX()::
Nonterminal name ArCX
read_flat_input 62
Hit a nonterminal, returning at: xed_reg_enum_t ArDX()::
BLines (lines remaining after reading input) = 65427
=============================================
Creating a generator 8
=============================================
ALines (lines before reading input) = 65427
read_input 65
NONTERMINAL: ArDX type= xed_reg_enum_t
Adding ArDX to nonterminal dict
Nonterminal xed_reg_enum_t ArDX()::
Nonterminal name ArDX
read_flat_input 65
Hit a nonterminal, returning at: xed_reg_enum_t ArSI()::
BLines (lines remaining after reading input) = 65423
=============================================
Creating a generator 9
=============================================
ALines (lines before reading input) = 65423
read_input 68
NONTERMINAL: ArSI type= xed_reg_enum_t
Adding ArSI to nonterminal dict
Nonterminal xed_reg_enum_t ArSI()::
Nonterminal name ArSI
read_flat_input 68
Hit a nonterminal, returning at: xed_reg_enum_t ArDI()::
BLines (lines remaining after reading input) = 65419
=============================================
Creating a generator 10
=============================================
ALines (lines before reading input) = 65419
read_input 71
NONTERMINAL: ArDI type= xed_reg_enum_t
Adding ArDI to nonterminal dict
Nonterminal xed_reg_enum_t ArDI()::
Nonterminal name ArDI
read_flat_input 71
Hit a nonterminal, returning at: xed_reg_enum_t ArSP()::
BLines (lines remaining after reading input) = 65415
=============================================
Creating a generator 11
=============================================
ALines (lines before reading input) = 65415
read_input 74
NONTERMINAL: ArSP type= xed_reg_enum_t
Adding ArSP to nonterminal dict
Nonterminal xed_reg_enum_t ArSP()::
Nonterminal name ArSP
read_flat_input 74
Hit a nonterminal, returning at: xed_reg_enum_t ArBP()::
BLines (lines remaining after reading input) = 65411
=============================================
Creating a generator 12
=============================================
ALines (lines before reading input) = 65411
read_input 77
NONTERMINAL: ArBP type= xed_reg_enum_t
Adding ArBP to nonterminal dict
Nonterminal xed_reg_enum_t ArBP()::
Nonterminal name ArBP
read_flat_input 77
Hit a nonterminal, returning at: xed_reg_enum_t SrSP()::
BLines (lines remaining after reading input) = 65407
=============================================
Creating a generator 13
=============================================
ALines (lines before reading input) = 65407
read_input 80
NONTERMINAL: SrSP type= xed_reg_enum_t
Adding SrSP to nonterminal dict
Nonterminal xed_reg_enum_t SrSP()::
Nonterminal name SrSP
read_flat_input 80
Hit a nonterminal, returning at: xed_reg_enum_t SrBP()::
BLines (lines remaining after reading input) = 65403
=============================================
Creating a generator 14
=============================================
ALines (lines before reading input) = 65403
read_input 83
NONTERMINAL: SrBP type= xed_reg_enum_t
Adding SrBP to nonterminal dict
Nonterminal xed_reg_enum_t SrBP()::
Nonterminal name SrBP
read_flat_input 83
Hit a nonterminal, returning at: xed_reg_enum_t Ar8()::
BLines (lines remaining after reading input) = 65399
=============================================
Creating a generator 15
=============================================
ALines (lines before reading input) = 65399
read_input 86
NONTERMINAL: Ar8 type= xed_reg_enum_t
Adding Ar8 to nonterminal dict
Nonterminal xed_reg_enum_t Ar8()::
Nonterminal name Ar8
read_flat_input 86
Hit a nonterminal, returning at: xed_reg_enum_t Ar9()::
BLines (lines remaining after reading input) = 65395
=============================================
Creating a generator 16
=============================================
ALines (lines before reading input) = 65395
read_input 89
NONTERMINAL: Ar9 type= xed_reg_enum_t
Adding Ar9 to nonterminal dict
Nonterminal xed_reg_enum_t Ar9()::
Nonterminal name Ar9
read_flat_input 89
Hit a nonterminal, returning at: xed_reg_enum_t Ar10()::
BLines (lines remaining after reading input) = 65391
=============================================
Creating a generator 17
=============================================
ALines (lines before reading input) = 65391
read_input 92
NONTERMINAL: Ar10 type= xed_reg_enum_t
Adding Ar10 to nonterminal dict
Nonterminal xed_reg_enum_t Ar10()::
Nonterminal name Ar10
read_flat_input 92
Hit a nonterminal, returning at: xed_reg_enum_t Ar11()::
BLines (lines remaining after reading input) = 65387
=============================================
Creating a generator 18
=============================================
ALines (lines before reading input) = 65387
read_input 95
NONTERMINAL: Ar11 type= xed_reg_enum_t
Adding Ar11 to nonterminal dict
Nonterminal xed_reg_enum_t Ar11()::
Nonterminal name Ar11
read_flat_input 95
Hit a nonterminal, returning at: xed_reg_enum_t Ar12()::
BLines (lines remaining after reading input) = 65383
=============================================
Creating a generator 19
=============================================
ALines (lines before reading input) = 65383
read_input 98
NONTERMINAL: Ar12 type= xed_reg_enum_t
Adding Ar12 to nonterminal dict
Nonterminal xed_reg_enum_t Ar12()::
Nonterminal name Ar12
read_flat_input 98
Hit a nonterminal, returning at: xed_reg_enum_t Ar13()::
BLines (lines remaining after reading input) = 65379
=============================================
Creating a generator 20
=============================================
ALines (lines before reading input) = 65379
read_input 101
NONTERMINAL: Ar13 type= xed_reg_enum_t
Adding Ar13 to nonterminal dict
Nonterminal xed_reg_enum_t Ar13()::
Nonterminal name Ar13
read_flat_input 101
Hit a nonterminal, returning at: xed_reg_enum_t Ar14()::
BLines (lines remaining after reading input) = 65375
=============================================
Creating a generator 21
=============================================
ALines (lines before reading input) = 65375
read_input 104
NONTERMINAL: Ar14 type= xed_reg_enum_t
Adding Ar14 to nonterminal dict
Nonterminal xed_reg_enum_t Ar14()::
Nonterminal name Ar14
read_flat_input 104
Hit a nonterminal, returning at: xed_reg_enum_t Ar15()::
BLines (lines remaining after reading input) = 65371
=============================================
Creating a generator 22
=============================================
ALines (lines before reading input) = 65371
read_input 107
NONTERMINAL: Ar15 type= xed_reg_enum_t
Adding Ar15 to nonterminal dict
Nonterminal xed_reg_enum_t Ar15()::
Nonterminal name Ar15
read_flat_input 107
Hit a nonterminal, returning at: xed_reg_enum_t rIP()::
BLines (lines remaining after reading input) = 65367
=============================================
Creating a generator 23
=============================================
ALines (lines before reading input) = 65367
read_input 110
NONTERMINAL: rIP type= xed_reg_enum_t
Adding rIP to nonterminal dict
Nonterminal xed_reg_enum_t rIP()::
Nonterminal name rIP
read_flat_input 110
Hit a nonterminal, returning at: xed_reg_enum_t rIPa()::
BLines (lines remaining after reading input) = 65363
=============================================
Creating a generator 24
=============================================
ALines (lines before reading input) = 65363
read_input 113
NONTERMINAL: rIPa type= xed_reg_enum_t
Adding rIPa to nonterminal dict
Nonterminal xed_reg_enum_t rIPa()::
Nonterminal name rIPa
read_flat_input 113
Hit a nonterminal, returning at: xed_reg_enum_t OeAX()::
BLines (lines remaining after reading input) = 65360
=============================================
Creating a generator 25
=============================================
ALines (lines before reading input) = 65360
read_input 115
NONTERMINAL: OeAX type= xed_reg_enum_t
Adding OeAX to nonterminal dict
Nonterminal xed_reg_enum_t OeAX()::
Nonterminal name OeAX
read_flat_input 115
Hit a nonterminal, returning at: xed_reg_enum_t OrAX()::
BLines (lines remaining after reading input) = 65356
=============================================
Creating a generator 26
=============================================
ALines (lines before reading input) = 65356
read_input 118
NONTERMINAL: OrAX type= xed_reg_enum_t
Adding OrAX to nonterminal dict
Nonterminal xed_reg_enum_t OrAX()::
Nonterminal name OrAX
read_flat_input 118
Hit a nonterminal, returning at: xed_reg_enum_t OrDX()::
BLines (lines remaining after reading input) = 65352
=============================================
Creating a generator 27
=============================================
ALines (lines before reading input) = 65352
read_input 121
NONTERMINAL: OrDX type= xed_reg_enum_t
Adding OrDX to nonterminal dict
Nonterminal xed_reg_enum_t OrDX()::
Nonterminal name OrDX
read_flat_input 121
Hit a nonterminal, returning at: xed_reg_enum_t OrCX()::
BLines (lines remaining after reading input) = 65348
=============================================
Creating a generator 28
=============================================
ALines (lines before reading input) = 65348
read_input 124
NONTERMINAL: OrCX type= xed_reg_enum_t
Adding OrCX to nonterminal dict
Nonterminal xed_reg_enum_t OrCX()::
Nonterminal name OrCX
read_flat_input 124
Hit a nonterminal, returning at: xed_reg_enum_t OrBX()::
BLines (lines remaining after reading input) = 65344
=============================================
Creating a generator 29
=============================================
ALines (lines before reading input) = 65344
read_input 127
NONTERMINAL: OrBX type= xed_reg_enum_t
Adding OrBX to nonterminal dict
Nonterminal xed_reg_enum_t OrBX()::
Nonterminal name OrBX
read_flat_input 127
Hit a nonterminal, returning at: xed_reg_enum_t OrSP()::
BLines (lines remaining after reading input) = 65340
=============================================
Creating a generator 30
=============================================
ALines (lines before reading input) = 65340
read_input 130
NONTERMINAL: OrSP type= xed_reg_enum_t
Adding OrSP to nonterminal dict
Nonterminal xed_reg_enum_t OrSP()::
Nonterminal name OrSP
read_flat_input 130
Hit a nonterminal, returning at: xed_reg_enum_t OrBP()::
BLines (lines remaining after reading input) = 65336
=============================================
Creating a generator 31
=============================================
ALines (lines before reading input) = 65336
read_input 133
NONTERMINAL: OrBP type= xed_reg_enum_t
Adding OrBP to nonterminal dict
Nonterminal xed_reg_enum_t OrBP()::
Nonterminal name OrBP
read_flat_input 133
Hit a nonterminal, returning at: xed_reg_enum_t rFLAGS()::
BLines (lines remaining after reading input) = 65332
=============================================
Creating a generator 32
=============================================
ALines (lines before reading input) = 65332
read_input 136
NONTERMINAL: rFLAGS type= xed_reg_enum_t
Adding rFLAGS to nonterminal dict
Nonterminal xed_reg_enum_t rFLAGS()::
Nonterminal name rFLAGS
read_flat_input 136
Hit a nonterminal, returning at: xed_reg_enum_t MMX_R()::
BLines (lines remaining after reading input) = 65328
=============================================
Creating a generator 33
=============================================
ALines (lines before reading input) = 65328
read_input 139
NONTERMINAL: MMX_R type= xed_reg_enum_t
Adding MMX_R to nonterminal dict
Nonterminal xed_reg_enum_t MMX_R()::
Nonterminal name MMX_R
read_flat_input 139
Hit a nonterminal, returning at: xed_reg_enum_t MMX_B()::
BLines (lines remaining after reading input) = 65319
=============================================
Creating a generator 34
=============================================
ALines (lines before reading input) = 65319
read_input 147
NONTERMINAL: MMX_B type= xed_reg_enum_t
Adding MMX_B to nonterminal dict
Nonterminal xed_reg_enum_t MMX_B()::
Nonterminal name MMX_B
read_flat_input 147
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_R()::
BLines (lines remaining after reading input) = 65310
=============================================
Creating a generator 35
=============================================
ALines (lines before reading input) = 65310
read_input 155
NONTERMINAL: GPRv_R type= xed_reg_enum_t
Adding GPRv_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_R()::
Nonterminal name GPRv_R
read_flat_input 155
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_SB()::
BLines (lines remaining after reading input) = 65306
=============================================
Creating a generator 36
=============================================
ALines (lines before reading input) = 65306
read_input 158
NONTERMINAL: GPRv_SB type= xed_reg_enum_t
Adding GPRv_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_SB()::
Nonterminal name GPRv_SB
read_flat_input 158
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_R()::
BLines (lines remaining after reading input) = 65302
=============================================
Creating a generator 37
=============================================
ALines (lines before reading input) = 65302
read_input 161
NONTERMINAL: GPRz_R type= xed_reg_enum_t
Adding GPRz_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_R()::
Nonterminal name GPRz_R
read_flat_input 161
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_B()::
BLines (lines remaining after reading input) = 65298
=============================================
Creating a generator 38
=============================================
ALines (lines before reading input) = 65298
read_input 164
NONTERMINAL: GPRv_B type= xed_reg_enum_t
Adding GPRv_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_B()::
Nonterminal name GPRv_B
read_flat_input 164
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_B()::
BLines (lines remaining after reading input) = 65294
=============================================
Creating a generator 39
=============================================
ALines (lines before reading input) = 65294
read_input 167
NONTERMINAL: GPRz_B type= xed_reg_enum_t
Adding GPRz_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_B()::
Nonterminal name GPRz_B
read_flat_input 167
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_B()::
BLines (lines remaining after reading input) = 65290
=============================================
Creating a generator 40
=============================================
ALines (lines before reading input) = 65290
read_input 170
NONTERMINAL: GPRy_B type= xed_reg_enum_t
Adding GPRy_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_B()::
Nonterminal name GPRy_B
read_flat_input 170
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_R()::
BLines (lines remaining after reading input) = 65286
=============================================
Creating a generator 41
=============================================
ALines (lines before reading input) = 65286
read_input 173
NONTERMINAL: GPRy_R type= xed_reg_enum_t
Adding GPRy_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_R()::
Nonterminal name GPRy_R
read_flat_input 173
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_R()::
BLines (lines remaining after reading input) = 65282
=============================================
Creating a generator 42
=============================================
ALines (lines before reading input) = 65282
read_input 176
NONTERMINAL: GPR64_R type= xed_reg_enum_t
Adding GPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_R()::
Nonterminal name GPR64_R
read_flat_input 176
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_B()::
BLines (lines remaining after reading input) = 65265
=============================================
Creating a generator 43
=============================================
ALines (lines before reading input) = 65265
read_input 192
NONTERMINAL: GPR64_B type= xed_reg_enum_t
Adding GPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_B()::
Nonterminal name GPR64_B
read_flat_input 192
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_SB()::
BLines (lines remaining after reading input) = 65248
=============================================
Creating a generator 44
=============================================
ALines (lines before reading input) = 65248
read_input 208
NONTERMINAL: GPR64_SB type= xed_reg_enum_t
Adding GPR64_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_SB()::
Nonterminal name GPR64_SB
read_flat_input 208
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_X()::
BLines (lines remaining after reading input) = 65231
=============================================
Creating a generator 45
=============================================
ALines (lines before reading input) = 65231
read_input 224
NONTERMINAL: GPR64_X type= xed_reg_enum_t
Adding GPR64_X to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_X()::
Nonterminal name GPR64_X
read_flat_input 224
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_R()::
BLines (lines remaining after reading input) = 65214
=============================================
Creating a generator 46
=============================================
ALines (lines before reading input) = 65214
read_input 240
NONTERMINAL: GPR32_R type= xed_reg_enum_t
Adding GPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_R()::
Nonterminal name GPR32_R
read_flat_input 240
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_B()::
BLines (lines remaining after reading input) = 65197
=============================================
Creating a generator 47
=============================================
ALines (lines before reading input) = 65197
read_input 256
NONTERMINAL: GPR32_B type= xed_reg_enum_t
Adding GPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_B()::
Nonterminal name GPR32_B
read_flat_input 256
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_SB()::
BLines (lines remaining after reading input) = 65180
=============================================
Creating a generator 48
=============================================
ALines (lines before reading input) = 65180
read_input 272
NONTERMINAL: GPR32_SB type= xed_reg_enum_t
Adding GPR32_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_SB()::
Nonterminal name GPR32_SB
read_flat_input 272
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_X()::
BLines (lines remaining after reading input) = 65163
=============================================
Creating a generator 49
=============================================
ALines (lines before reading input) = 65163
read_input 288
NONTERMINAL: GPR32_X type= xed_reg_enum_t
Adding GPR32_X to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_X()::
Nonterminal name GPR32_X
read_flat_input 288
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_R()::
BLines (lines remaining after reading input) = 65146
=============================================
Creating a generator 50
=============================================
ALines (lines before reading input) = 65146
read_input 304
NONTERMINAL: GPR16_R type= xed_reg_enum_t
Adding GPR16_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_R()::
Nonterminal name GPR16_R
read_flat_input 304
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_B()::
BLines (lines remaining after reading input) = 65129
=============================================
Creating a generator 51
=============================================
ALines (lines before reading input) = 65129
read_input 320
NONTERMINAL: GPR16_B type= xed_reg_enum_t
Adding GPR16_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_B()::
Nonterminal name GPR16_B
read_flat_input 320
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_SB()::
BLines (lines remaining after reading input) = 65112
=============================================
Creating a generator 52
=============================================
ALines (lines before reading input) = 65112
read_input 336
NONTERMINAL: GPR16_SB type= xed_reg_enum_t
Adding GPR16_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_SB()::
Nonterminal name GPR16_SB
read_flat_input 336
Hit a nonterminal, returning at: xed_reg_enum_t CR_R()::
BLines (lines remaining after reading input) = 65095
=============================================
Creating a generator 53
=============================================
ALines (lines before reading input) = 65095
read_input 352
NONTERMINAL: CR_R type= xed_reg_enum_t
Adding CR_R to nonterminal dict
Nonterminal xed_reg_enum_t CR_R()::
Nonterminal name CR_R
read_flat_input 352
Hit a nonterminal, returning at: xed_reg_enum_t CR_B()::
BLines (lines remaining after reading input) = 65078
=============================================
Creating a generator 54
=============================================
ALines (lines before reading input) = 65078
read_input 368
NONTERMINAL: CR_B type= xed_reg_enum_t
Adding CR_B to nonterminal dict
Nonterminal xed_reg_enum_t CR_B()::
Nonterminal name CR_B
read_flat_input 368
Hit a nonterminal, returning at: xed_reg_enum_t DR_R()::
BLines (lines remaining after reading input) = 65061
=============================================
Creating a generator 55
=============================================
ALines (lines before reading input) = 65061
read_input 384
NONTERMINAL: DR_R type= xed_reg_enum_t
Adding DR_R to nonterminal dict
Nonterminal xed_reg_enum_t DR_R()::
Nonterminal name DR_R
read_flat_input 384
Hit a nonterminal, returning at: xed_reg_enum_t X87()::
BLines (lines remaining after reading input) = 65044
=============================================
Creating a generator 56
=============================================
ALines (lines before reading input) = 65044
read_input 400
NONTERMINAL: X87 type= xed_reg_enum_t
Adding X87 to nonterminal dict
Nonterminal xed_reg_enum_t X87()::
Nonterminal name X87
read_flat_input 400
Hit a nonterminal, returning at: xed_reg_enum_t SEG()::
BLines (lines remaining after reading input) = 65035
=============================================
Creating a generator 57
=============================================
ALines (lines before reading input) = 65035
read_input 408
NONTERMINAL: SEG type= xed_reg_enum_t
Adding SEG to nonterminal dict
Nonterminal xed_reg_enum_t SEG()::
Nonterminal name SEG
read_flat_input 408
Hit a nonterminal, returning at: xed_reg_enum_t SEG_MOV()::
BLines (lines remaining after reading input) = 65026
=============================================
Creating a generator 58
=============================================
ALines (lines before reading input) = 65026
read_input 416
NONTERMINAL: SEG_MOV type= xed_reg_enum_t
Adding SEG_MOV to nonterminal dict
Nonterminal xed_reg_enum_t SEG_MOV()::
Nonterminal name SEG_MOV
read_flat_input 416
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG()::
BLines (lines remaining after reading input) = 65017
=============================================
Creating a generator 59
=============================================
ALines (lines before reading input) = 65017
read_input 424
NONTERMINAL: FINAL_DSEG type= xed_reg_enum_t
Adding FINAL_DSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG()::
Nonterminal name FINAL_DSEG
read_flat_input 424
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_NOT64()::
BLines (lines remaining after reading input) = 65013
=============================================
Creating a generator 60
=============================================
ALines (lines before reading input) = 65013
read_input 427
NONTERMINAL: FINAL_DSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_NOT64()::
Nonterminal name FINAL_DSEG_NOT64
read_flat_input 427
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_MODE64()::
BLines (lines remaining after reading input) = 65005
=============================================
Creating a generator 61
=============================================
ALines (lines before reading input) = 65005
read_input 434
NONTERMINAL: FINAL_DSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_MODE64()::
Nonterminal name FINAL_DSEG_MODE64
read_flat_input 434
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1()::
BLines (lines remaining after reading input) = 64997
=============================================
Creating a generator 62
=============================================
ALines (lines before reading input) = 64997
read_input 441
NONTERMINAL: FINAL_DSEG1 type= xed_reg_enum_t
Adding FINAL_DSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1()::
Nonterminal name FINAL_DSEG1
read_flat_input 441
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_NOT64()::
BLines (lines remaining after reading input) = 64993
=============================================
Creating a generator 63
=============================================
ALines (lines before reading input) = 64993
read_input 444
NONTERMINAL: FINAL_DSEG1_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG1_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_NOT64()::
Nonterminal name FINAL_DSEG1_NOT64
read_flat_input 444
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_MODE64()::
BLines (lines remaining after reading input) = 64985
=============================================
Creating a generator 64
=============================================
ALines (lines before reading input) = 64985
read_input 451
NONTERMINAL: FINAL_DSEG1_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG1_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_MODE64()::
Nonterminal name FINAL_DSEG1_MODE64
read_flat_input 451
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG()::
BLines (lines remaining after reading input) = 64977
=============================================
Creating a generator 65
=============================================
ALines (lines before reading input) = 64977
read_input 458
NONTERMINAL: FINAL_ESEG type= xed_reg_enum_t
Adding FINAL_ESEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG()::
Nonterminal name FINAL_ESEG
read_flat_input 458
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG1()::
BLines (lines remaining after reading input) = 64973
=============================================
Creating a generator 66
=============================================
ALines (lines before reading input) = 64973
read_input 461
NONTERMINAL: FINAL_ESEG1 type= xed_reg_enum_t
Adding FINAL_ESEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG1()::
Nonterminal name FINAL_ESEG1
read_flat_input 461
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG1()::
BLines (lines remaining after reading input) = 64969
=============================================
Creating a generator 67
=============================================
ALines (lines before reading input) = 64969
read_input 464
NONTERMINAL: FINAL_SSEG1 type= xed_reg_enum_t
Adding FINAL_SSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG1()::
Nonterminal name FINAL_SSEG1
read_flat_input 464
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG0()::
BLines (lines remaining after reading input) = 64965
=============================================
Creating a generator 68
=============================================
ALines (lines before reading input) = 64965
read_input 467
NONTERMINAL: FINAL_SSEG0 type= xed_reg_enum_t
Adding FINAL_SSEG0 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG0()::
Nonterminal name FINAL_SSEG0
read_flat_input 467
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG()::
BLines (lines remaining after reading input) = 64961
=============================================
Creating a generator 69
=============================================
ALines (lines before reading input) = 64961
read_input 470
NONTERMINAL: FINAL_SSEG type= xed_reg_enum_t
Adding FINAL_SSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG()::
Nonterminal name FINAL_SSEG
read_flat_input 470
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_NOT64()::
BLines (lines remaining after reading input) = 64957
=============================================
Creating a generator 70
=============================================
ALines (lines before reading input) = 64957
read_input 473
NONTERMINAL: FINAL_SSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_SSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_NOT64()::
Nonterminal name FINAL_SSEG_NOT64
read_flat_input 473
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_MODE64()::
BLines (lines remaining after reading input) = 64949
=============================================
Creating a generator 71
=============================================
ALines (lines before reading input) = 64949
read_input 480
NONTERMINAL: FINAL_SSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_SSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_MODE64()::
Nonterminal name FINAL_SSEG_MODE64
read_flat_input 480
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_R()::
BLines (lines remaining after reading input) = 64941
=============================================
Creating a generator 72
=============================================
ALines (lines before reading input) = 64941
read_input 487
NONTERMINAL: GPR8_R type= xed_reg_enum_t
Adding GPR8_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_R()::
Nonterminal name GPR8_R
read_flat_input 487
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_B()::
BLines (lines remaining after reading input) = 64920
=============================================
Creating a generator 73
=============================================
ALines (lines before reading input) = 64920
read_input 507
NONTERMINAL: GPR8_B type= xed_reg_enum_t
Adding GPR8_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_B()::
Nonterminal name GPR8_B
read_flat_input 507
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_SB()::
BLines (lines remaining after reading input) = 64899
=============================================
Creating a generator 74
=============================================
ALines (lines before reading input) = 64899
read_input 527
NONTERMINAL: GPR8_SB type= xed_reg_enum_t
Adding GPR8_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_SB()::
Nonterminal name GPR8_SB
read_flat_input 527
Hit a nonterminal, returning at: OSZ_NONTERM()::
BLines (lines remaining after reading input) = 64878
=============================================
Creating a generator 75
=============================================
ALines (lines before reading input) = 64878
read_input 547
NONTERMINAL: OSZ_NONTERM notype
Adding OSZ_NONTERM to nonterminal dict
Nonterminal OSZ_NONTERM()::
Nonterminal name OSZ_NONTERM
read_flat_input 547
Hit a nonterminal, returning at: DF64()::
BLines (lines remaining after reading input) = 64869
=============================================
Creating a generator 76
=============================================
ALines (lines before reading input) = 64869
read_input 555
NONTERMINAL: DF64 notype
Adding DF64 to nonterminal dict
Nonterminal DF64()::
Nonterminal name DF64
read_flat_input 555
Hit a nonterminal, returning at: REFINING66()::
BLines (lines remaining after reading input) = 64862
=============================================
Creating a generator 77
=============================================
ALines (lines before reading input) = 64862
read_input 561
NONTERMINAL: REFINING66 notype
Adding REFINING66 to nonterminal dict
Nonterminal REFINING66()::
Nonterminal name REFINING66
read_flat_input 561
Hit a nonterminal, returning at: IGNORE66()::
BLines (lines remaining after reading input) = 64857
=============================================
Creating a generator 78
=============================================
ALines (lines before reading input) = 64857
read_input 565
NONTERMINAL: IGNORE66 notype
Adding IGNORE66 to nonterminal dict
Nonterminal IGNORE66()::
Nonterminal name IGNORE66
read_flat_input 565
Hit a nonterminal, returning at: IMMUNE66()::
BLines (lines remaining after reading input) = 64852
=============================================
Creating a generator 79
=============================================
ALines (lines before reading input) = 64852
read_input 569
NONTERMINAL: IMMUNE66 notype
Adding IMMUNE66 to nonterminal dict
Nonterminal IMMUNE66()::
Nonterminal name IMMUNE66
read_flat_input 569
Hit a nonterminal, returning at: CR_WIDTH()::
BLines (lines remaining after reading input) = 64847
=============================================
Creating a generator 80
=============================================
ALines (lines before reading input) = 64847
read_input 573
NONTERMINAL: CR_WIDTH notype
Adding CR_WIDTH to nonterminal dict
Nonterminal CR_WIDTH()::
Nonterminal name CR_WIDTH
read_flat_input 573
Hit a nonterminal, returning at: IMMUNE66_LOOP64()::
BLines (lines remaining after reading input) = 64843
=============================================
Creating a generator 81
=============================================
ALines (lines before reading input) = 64843
read_input 576
NONTERMINAL: IMMUNE66_LOOP64 notype
Adding IMMUNE66_LOOP64 to nonterminal dict
Nonterminal IMMUNE66_LOOP64()::
Nonterminal name IMMUNE66_LOOP64
read_flat_input 576
Hit a nonterminal, returning at: IMMUNE_REXW()::
BLines (lines remaining after reading input) = 64839
=============================================
Creating a generator 82
=============================================
ALines (lines before reading input) = 64839
read_input 579
NONTERMINAL: IMMUNE_REXW notype
Adding IMMUNE_REXW to nonterminal dict
Nonterminal IMMUNE_REXW()::
Nonterminal name IMMUNE_REXW
read_flat_input 579
Hit a nonterminal, returning at: FORCE64()::
BLines (lines remaining after reading input) = 64833
=============================================
Creating a generator 83
=============================================
ALines (lines before reading input) = 64833
read_input 584
NONTERMINAL: FORCE64 notype
Adding FORCE64 to nonterminal dict
Nonterminal FORCE64()::
Nonterminal name FORCE64
read_flat_input 584
Hit a nonterminal, returning at: ASZ_NONTERM()::
BLines (lines remaining after reading input) = 64830
=============================================
Creating a generator 84
=============================================
ALines (lines before reading input) = 64830
read_input 585
NONTERMINAL: ASZ_NONTERM notype
Adding ASZ_NONTERM to nonterminal dict
Nonterminal ASZ_NONTERM()::
Nonterminal name ASZ_NONTERM
read_flat_input 585
Hit a nonterminal, returning at: ONE()::
BLines (lines remaining after reading input) = 64823
=============================================
Creating a generator 85
=============================================
ALines (lines before reading input) = 64823
read_input 591
NONTERMINAL: ONE notype
Adding ONE to nonterminal dict
Nonterminal ONE()::
Nonterminal name ONE
read_flat_input 591
Hit a nonterminal, returning at: UIMMv()::
BLines (lines remaining after reading input) = 64819
=============================================
Creating a generator 86
=============================================
ALines (lines before reading input) = 64819
read_input 594
NONTERMINAL: UIMMv notype
Adding UIMMv to nonterminal dict
Nonterminal UIMMv()::
Nonterminal name UIMMv
read_flat_input 594
Hit a nonterminal, returning at: SIMMz()::
BLines (lines remaining after reading input) = 64815
=============================================
Creating a generator 87
=============================================
ALines (lines before reading input) = 64815
read_input 597
NONTERMINAL: SIMMz notype
Adding SIMMz to nonterminal dict
Nonterminal SIMMz()::
Nonterminal name SIMMz
read_flat_input 597
Hit a nonterminal, returning at: SIMM8()::
BLines (lines remaining after reading input) = 64811
=============================================
Creating a generator 88
=============================================
ALines (lines before reading input) = 64811
read_input 600
NONTERMINAL: SIMM8 notype
Adding SIMM8 to nonterminal dict
Nonterminal SIMM8()::
Nonterminal name SIMM8
read_flat_input 600
Hit a nonterminal, returning at: UIMM8()::
BLines (lines remaining after reading input) = 64809
=============================================
Creating a generator 89
=============================================
ALines (lines before reading input) = 64809
read_input 601
NONTERMINAL: UIMM8 notype
Adding UIMM8 to nonterminal dict
Nonterminal UIMM8()::
Nonterminal name UIMM8
read_flat_input 601
Hit a nonterminal, returning at: UIMM8_1()::
BLines (lines remaining after reading input) = 64807
=============================================
Creating a generator 90
=============================================
ALines (lines before reading input) = 64807
read_input 602
NONTERMINAL: UIMM8_1 notype
Adding UIMM8_1 to nonterminal dict
Nonterminal UIMM8_1()::
Nonterminal name UIMM8_1
read_flat_input 602
Hit a nonterminal, returning at: UIMM16()::
BLines (lines remaining after reading input) = 64805
=============================================
Creating a generator 91
=============================================
ALines (lines before reading input) = 64805
read_input 603
NONTERMINAL: UIMM16 notype
Adding UIMM16 to nonterminal dict
Nonterminal UIMM16()::
Nonterminal name UIMM16
read_flat_input 603
Hit a nonterminal, returning at: UIMM32()::
BLines (lines remaining after reading input) = 64803
=============================================
Creating a generator 92
=============================================
ALines (lines before reading input) = 64803
read_input 604
NONTERMINAL: UIMM32 notype
Adding UIMM32 to nonterminal dict
Nonterminal UIMM32()::
Nonterminal name UIMM32
read_flat_input 604
Hit a nonterminal, returning at: BRDISP8()::
BLines (lines remaining after reading input) = 64801
=============================================
Creating a generator 93
=============================================
ALines (lines before reading input) = 64801
read_input 605
NONTERMINAL: BRDISP8 notype
Adding BRDISP8 to nonterminal dict
Nonterminal BRDISP8()::
Nonterminal name BRDISP8
read_flat_input 605
Hit a nonterminal, returning at: BRDISP32()::
BLines (lines remaining after reading input) = 64799
=============================================
Creating a generator 94
=============================================
ALines (lines before reading input) = 64799
read_input 606
NONTERMINAL: BRDISP32 notype
Adding BRDISP32 to nonterminal dict
Nonterminal BRDISP32()::
Nonterminal name BRDISP32
read_flat_input 606
Hit a nonterminal, returning at: BRDISPz()::
BLines (lines remaining after reading input) = 64797
=============================================
Creating a generator 95
=============================================
ALines (lines before reading input) = 64797
read_input 607
NONTERMINAL: BRDISPz notype
Adding BRDISPz to nonterminal dict
Nonterminal BRDISPz()::
Nonterminal name BRDISPz
read_flat_input 607
Hit a nonterminal, returning at: MEMDISPv()::
BLines (lines remaining after reading input) = 64793
=============================================
Creating a generator 96
=============================================
ALines (lines before reading input) = 64793
read_input 610
NONTERMINAL: MEMDISPv notype
Adding MEMDISPv to nonterminal dict
Nonterminal MEMDISPv()::
Nonterminal name MEMDISPv
read_flat_input 610
Hit a nonterminal, returning at: MEMDISP32()::
BLines (lines remaining after reading input) = 64789
=============================================
Creating a generator 97
=============================================
ALines (lines before reading input) = 64789
read_input 613
NONTERMINAL: MEMDISP32 notype
Adding MEMDISP32 to nonterminal dict
Nonterminal MEMDISP32()::
Nonterminal name MEMDISP32
read_flat_input 613
Hit a nonterminal, returning at: MEMDISP16()::
BLines (lines remaining after reading input) = 64787
=============================================
Creating a generator 98
=============================================
ALines (lines before reading input) = 64787
read_input 614
NONTERMINAL: MEMDISP16 notype
Adding MEMDISP16 to nonterminal dict
Nonterminal MEMDISP16()::
Nonterminal name MEMDISP16
read_flat_input 614
Hit a nonterminal, returning at: MEMDISP8()::
BLines (lines remaining after reading input) = 64785
=============================================
Creating a generator 99
=============================================
ALines (lines before reading input) = 64785
read_input 615
NONTERMINAL: MEMDISP8 notype
Adding MEMDISP8 to nonterminal dict
Nonterminal MEMDISP8()::
Nonterminal name MEMDISP8
read_flat_input 615
Hit a nonterminal, returning at: MEMDISP()::
BLines (lines remaining after reading input) = 64783
=============================================
Creating a generator 100
=============================================
ALines (lines before reading input) = 64783
read_input 616
NONTERMINAL: MEMDISP notype
Adding MEMDISP to nonterminal dict
Nonterminal MEMDISP()::
Nonterminal name MEMDISP
read_flat_input 616
Hit a nonterminal, returning at: MODRM()::
BLines (lines remaining after reading input) = 64778
=============================================
Creating a generator 101
=============================================
ALines (lines before reading input) = 64778
read_input 620
NONTERMINAL: MODRM notype
Adding MODRM to nonterminal dict
Nonterminal MODRM()::
Nonterminal name MODRM
read_flat_input 620
Hit a nonterminal, returning at: MODRM64alt32()::
BLines (lines remaining after reading input) = 64771
=============================================
Creating a generator 102
=============================================
ALines (lines before reading input) = 64771
read_input 626
NONTERMINAL: MODRM64alt32 notype
Adding MODRM64alt32 to nonterminal dict
Nonterminal MODRM64alt32()::
Nonterminal name MODRM64alt32
read_flat_input 626
Hit a nonterminal, returning at: MODRM32()::
BLines (lines remaining after reading input) = 64722
=============================================
Creating a generator 103
=============================================
ALines (lines before reading input) = 64722
read_input 674
NONTERMINAL: MODRM32 notype
Adding MODRM32 to nonterminal dict
Nonterminal MODRM32()::
Nonterminal name MODRM32
read_flat_input 674
Hit a nonterminal, returning at: MODRM16()::
BLines (lines remaining after reading input) = 64697
=============================================
Creating a generator 104
=============================================
ALines (lines before reading input) = 64697
read_input 698
NONTERMINAL: MODRM16 notype
Adding MODRM16 to nonterminal dict
Nonterminal MODRM16()::
Nonterminal name MODRM16
read_flat_input 698
Hit a nonterminal, returning at: SIB()::
BLines (lines remaining after reading input) = 64672
=============================================
Creating a generator 105
=============================================
ALines (lines before reading input) = 64672
read_input 722
NONTERMINAL: SIB notype
Adding SIB to nonterminal dict
Nonterminal SIB()::
Nonterminal name SIB
read_flat_input 722
Hit a nonterminal, returning at: SIB_BASE0()::
BLines (lines remaining after reading input) = 64607
=============================================
Creating a generator 106
=============================================
ALines (lines before reading input) = 64607
read_input 786
NONTERMINAL: SIB_BASE0 notype
Adding SIB_BASE0 to nonterminal dict
Nonterminal SIB_BASE0()::
Nonterminal name SIB_BASE0
read_flat_input 786
Hit a nonterminal, returning at: OVERRIDE_SEG0()::
BLines (lines remaining after reading input) = 64586
=============================================
Creating a generator 107
=============================================
ALines (lines before reading input) = 64586
read_input 806
NONTERMINAL: OVERRIDE_SEG0 notype
Adding OVERRIDE_SEG0 to nonterminal dict
Nonterminal OVERRIDE_SEG0()::
Nonterminal name OVERRIDE_SEG0
read_flat_input 806
Hit a nonterminal, returning at: OVERRIDE_SEG1()::
BLines (lines remaining after reading input) = 64582
=============================================
Creating a generator 108
=============================================
ALines (lines before reading input) = 64582
read_input 809
NONTERMINAL: OVERRIDE_SEG1 notype
Adding OVERRIDE_SEG1 to nonterminal dict
Nonterminal OVERRIDE_SEG1()::
Nonterminal name OVERRIDE_SEG1
read_flat_input 809
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R()::
BLines (lines remaining after reading input) = 64578
=============================================
Creating a generator 109
=============================================
ALines (lines before reading input) = 64578
read_input 812
NONTERMINAL: XMM_R type= xed_reg_enum_t
Adding XMM_R to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R()::
Nonterminal name XMM_R
read_flat_input 812
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_32()::
BLines (lines remaining after reading input) = 64574
=============================================
Creating a generator 110
=============================================
ALines (lines before reading input) = 64574
read_input 815
NONTERMINAL: XMM_R_32 type= xed_reg_enum_t
Adding XMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_32()::
Nonterminal name XMM_R_32
read_flat_input 815
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_64()::
BLines (lines remaining after reading input) = 64565
=============================================
Creating a generator 111
=============================================
ALines (lines before reading input) = 64565
read_input 823
NONTERMINAL: XMM_R_64 type= xed_reg_enum_t
Adding XMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_64()::
Nonterminal name XMM_R_64
read_flat_input 823
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B()::
BLines (lines remaining after reading input) = 64548
=============================================
Creating a generator 112
=============================================
ALines (lines before reading input) = 64548
read_input 839
NONTERMINAL: XMM_B type= xed_reg_enum_t
Adding XMM_B to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B()::
Nonterminal name XMM_B
read_flat_input 839
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_32()::
BLines (lines remaining after reading input) = 64544
=============================================
Creating a generator 113
=============================================
ALines (lines before reading input) = 64544
read_input 842
NONTERMINAL: XMM_B_32 type= xed_reg_enum_t
Adding XMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_32()::
Nonterminal name XMM_B_32
read_flat_input 842
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_64()::
BLines (lines remaining after reading input) = 64535
=============================================
Creating a generator 114
=============================================
ALines (lines before reading input) = 64535
read_input 850
NONTERMINAL: XMM_B_64 type= xed_reg_enum_t
Adding XMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_64()::
Nonterminal name XMM_B_64
read_flat_input 850
Hit a nonterminal, returning at: BND_R_CHECK()::
BLines (lines remaining after reading input) = 64518
=============================================
Creating a generator 115
=============================================
ALines (lines before reading input) = 64518
read_input 866
NONTERMINAL: BND_R_CHECK notype
Adding BND_R_CHECK to nonterminal dict
Nonterminal BND_R_CHECK()::
Nonterminal name BND_R_CHECK
read_flat_input 866
Hit a nonterminal, returning at: BND_B_CHECK()::
BLines (lines remaining after reading input) = 64501
=============================================
Creating a generator 116
=============================================
ALines (lines before reading input) = 64501
read_input 882
NONTERMINAL: BND_B_CHECK notype
Adding BND_B_CHECK to nonterminal dict
Nonterminal BND_B_CHECK()::
Nonterminal name BND_B_CHECK
read_flat_input 882
Hit a nonterminal, returning at: xed_reg_enum_t BND_R()::
BLines (lines remaining after reading input) = 64484
=============================================
Creating a generator 117
=============================================
ALines (lines before reading input) = 64484
read_input 898
NONTERMINAL: BND_R type= xed_reg_enum_t
Adding BND_R to nonterminal dict
Nonterminal xed_reg_enum_t BND_R()::
Nonterminal name BND_R
read_flat_input 898
Hit a nonterminal, returning at: xed_reg_enum_t BND_B()::
BLines (lines remaining after reading input) = 64467
=============================================
Creating a generator 118
=============================================
ALines (lines before reading input) = 64467
read_input 914
NONTERMINAL: BND_B type= xed_reg_enum_t
Adding BND_B to nonterminal dict
Nonterminal xed_reg_enum_t BND_B()::
Nonterminal name BND_B
read_flat_input 914
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_R()::
BLines (lines remaining after reading input) = 64450
=============================================
Creating a generator 119
=============================================
ALines (lines before reading input) = 64450
read_input 930
NONTERMINAL: A_GPR_R type= xed_reg_enum_t
Adding A_GPR_R to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_R()::
Nonterminal name A_GPR_R
read_flat_input 930
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_B()::
BLines (lines remaining after reading input) = 64433
=============================================
Creating a generator 120
=============================================
ALines (lines before reading input) = 64433
read_input 946
NONTERMINAL: A_GPR_B type= xed_reg_enum_t
Adding A_GPR_B to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_B()::
Nonterminal name A_GPR_B
read_flat_input 946
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE()::
BLines (lines remaining after reading input) = 64416
=============================================
Creating a generator 121
=============================================
ALines (lines before reading input) = 64416
read_input 962
NONTERMINAL: XMM_SE type= xed_reg_enum_t
Adding XMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE()::
Nonterminal name XMM_SE
read_flat_input 962
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE64()::
BLines (lines remaining after reading input) = 64412
=============================================
Creating a generator 122
=============================================
ALines (lines before reading input) = 64412
read_input 965
NONTERMINAL: XMM_SE64 type= xed_reg_enum_t
Adding XMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE64()::
Nonterminal name XMM_SE64
read_flat_input 965
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE32()::
BLines (lines remaining after reading input) = 64395
=============================================
Creating a generator 123
=============================================
ALines (lines before reading input) = 64395
read_input 981
NONTERMINAL: XMM_SE32 type= xed_reg_enum_t
Adding XMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE32()::
Nonterminal name XMM_SE32
read_flat_input 981
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE()::
BLines (lines remaining after reading input) = 64378
=============================================
Creating a generator 124
=============================================
ALines (lines before reading input) = 64378
read_input 997
NONTERMINAL: YMM_SE type= xed_reg_enum_t
Adding YMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE()::
Nonterminal name YMM_SE
read_flat_input 997
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE64()::
BLines (lines remaining after reading input) = 64374
=============================================
Creating a generator 125
=============================================
ALines (lines before reading input) = 64374
read_input 1000
NONTERMINAL: YMM_SE64 type= xed_reg_enum_t
Adding YMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE64()::
Nonterminal name YMM_SE64
read_flat_input 1000
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE32()::
BLines (lines remaining after reading input) = 64357
=============================================
Creating a generator 126
=============================================
ALines (lines before reading input) = 64357
read_input 1016
NONTERMINAL: YMM_SE32 type= xed_reg_enum_t
Adding YMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE32()::
Nonterminal name YMM_SE32
read_flat_input 1016
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N()::
BLines (lines remaining after reading input) = 64340
=============================================
Creating a generator 127
=============================================
ALines (lines before reading input) = 64340
read_input 1032
NONTERMINAL: XMM_N type= xed_reg_enum_t
Adding XMM_N to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N()::
Nonterminal name XMM_N
read_flat_input 1032
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_32()::
BLines (lines remaining after reading input) = 64336
=============================================
Creating a generator 128
=============================================
ALines (lines before reading input) = 64336
read_input 1035
NONTERMINAL: XMM_N_32 type= xed_reg_enum_t
Adding XMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_32()::
Nonterminal name XMM_N_32
read_flat_input 1035
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_64()::
BLines (lines remaining after reading input) = 64327
=============================================
Creating a generator 129
=============================================
ALines (lines before reading input) = 64327
read_input 1043
NONTERMINAL: XMM_N_64 type= xed_reg_enum_t
Adding XMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_64()::
Nonterminal name XMM_N_64
read_flat_input 1043
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N()::
BLines (lines remaining after reading input) = 64310
=============================================
Creating a generator 130
=============================================
ALines (lines before reading input) = 64310
read_input 1059
NONTERMINAL: YMM_N type= xed_reg_enum_t
Adding YMM_N to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N()::
Nonterminal name YMM_N
read_flat_input 1059
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_32()::
BLines (lines remaining after reading input) = 64306
=============================================
Creating a generator 131
=============================================
ALines (lines before reading input) = 64306
read_input 1062
NONTERMINAL: YMM_N_32 type= xed_reg_enum_t
Adding YMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_32()::
Nonterminal name YMM_N_32
read_flat_input 1062
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_64()::
BLines (lines remaining after reading input) = 64297
=============================================
Creating a generator 132
=============================================
ALines (lines before reading input) = 64297
read_input 1070
NONTERMINAL: YMM_N_64 type= xed_reg_enum_t
Adding YMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_64()::
Nonterminal name YMM_N_64
read_flat_input 1070
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R()::
BLines (lines remaining after reading input) = 64280
=============================================
Creating a generator 133
=============================================
ALines (lines before reading input) = 64280
read_input 1086
NONTERMINAL: YMM_R type= xed_reg_enum_t
Adding YMM_R to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R()::
Nonterminal name YMM_R
read_flat_input 1086
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_32()::
BLines (lines remaining after reading input) = 64276
=============================================
Creating a generator 134
=============================================
ALines (lines before reading input) = 64276
read_input 1089
NONTERMINAL: YMM_R_32 type= xed_reg_enum_t
Adding YMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_32()::
Nonterminal name YMM_R_32
read_flat_input 1089
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_64()::
BLines (lines remaining after reading input) = 64267
=============================================
Creating a generator 135
=============================================
ALines (lines before reading input) = 64267
read_input 1097
NONTERMINAL: YMM_R_64 type= xed_reg_enum_t
Adding YMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_64()::
Nonterminal name YMM_R_64
read_flat_input 1097
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B()::
BLines (lines remaining after reading input) = 64250
=============================================
Creating a generator 136
=============================================
ALines (lines before reading input) = 64250
read_input 1113
NONTERMINAL: YMM_B type= xed_reg_enum_t
Adding YMM_B to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B()::
Nonterminal name YMM_B
read_flat_input 1113
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_32()::
BLines (lines remaining after reading input) = 64246
=============================================
Creating a generator 137
=============================================
ALines (lines before reading input) = 64246
read_input 1116
NONTERMINAL: YMM_B_32 type= xed_reg_enum_t
Adding YMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_32()::
Nonterminal name YMM_B_32
read_flat_input 1116
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_64()::
BLines (lines remaining after reading input) = 64237
=============================================
Creating a generator 138
=============================================
ALines (lines before reading input) = 64237
read_input 1124
NONTERMINAL: YMM_B_64 type= xed_reg_enum_t
Adding YMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_64()::
Nonterminal name YMM_B_64
read_flat_input 1124
Hit a nonterminal, returning at: AVX_SPLITTER()::
BLines (lines remaining after reading input) = 64220
=============================================
Creating a generator 139
=============================================
ALines (lines before reading input) = 64220
read_input 1140
NONTERMINAL: AVX_SPLITTER notype
Adding AVX_SPLITTER to nonterminal dict
Nonterminal AVX_SPLITTER()::
Nonterminal name AVX_SPLITTER
read_flat_input 1140
Hit a nonterminal, returning at: SE_IMM8()::
BLines (lines remaining after reading input) = 64217
=============================================
Creating a generator 140
=============================================
ALines (lines before reading input) = 64217
read_input 1142
NONTERMINAL: SE_IMM8 notype
Adding SE_IMM8 to nonterminal dict
Nonterminal SE_IMM8()::
Nonterminal name SE_IMM8
read_flat_input 1142
Hit a nonterminal, returning at: VMODRM_YMM()::
BLines (lines remaining after reading input) = 64215
=============================================
Creating a generator 141
=============================================
ALines (lines before reading input) = 64215
read_input 1143
NONTERMINAL: VMODRM_YMM notype
Adding VMODRM_YMM to nonterminal dict
Nonterminal VMODRM_YMM()::
Nonterminal name VMODRM_YMM
read_flat_input 1143
Hit a nonterminal, returning at: VMODRM_XMM()::
BLines (lines remaining after reading input) = 64211
=============================================
Creating a generator 142
=============================================
ALines (lines before reading input) = 64211
read_input 1146
NONTERMINAL: VMODRM_XMM notype
Adding VMODRM_XMM to nonterminal dict
Nonterminal VMODRM_XMM()::
Nonterminal name VMODRM_XMM
read_flat_input 1146
Hit a nonterminal, returning at: VSIB_YMM()::
BLines (lines remaining after reading input) = 64207
=============================================
Creating a generator 143
=============================================
ALines (lines before reading input) = 64207
read_input 1149
NONTERMINAL: VSIB_YMM notype
Adding VSIB_YMM to nonterminal dict
Nonterminal VSIB_YMM()::
Nonterminal name VSIB_YMM
read_flat_input 1149
Hit a nonterminal, returning at: VSIB_XMM()::
BLines (lines remaining after reading input) = 64202
=============================================
Creating a generator 144
=============================================
ALines (lines before reading input) = 64202
read_input 1153
NONTERMINAL: VSIB_XMM notype
Adding VSIB_XMM to nonterminal dict
Nonterminal VSIB_XMM()::
Nonterminal name VSIB_XMM
read_flat_input 1153
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 64197
=============================================
Creating a generator 145
=============================================
ALines (lines before reading input) = 64197
read_input 1157
NONTERMINAL: VSIB_INDEX_YMM type= xed_reg_enum_t
Adding VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_YMM()::
Nonterminal name VSIB_INDEX_YMM
read_flat_input 1157
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 64180
=============================================
Creating a generator 146
=============================================
ALines (lines before reading input) = 64180
read_input 1173
NONTERMINAL: VSIB_INDEX_XMM type= xed_reg_enum_t
Adding VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_XMM()::
Nonterminal name VSIB_INDEX_XMM
read_flat_input 1173
Hit a nonterminal, returning at: VSIB_BASE()::
BLines (lines remaining after reading input) = 64163
=============================================
Creating a generator 147
=============================================
ALines (lines before reading input) = 64163
read_input 1189
NONTERMINAL: VSIB_BASE notype
Adding VSIB_BASE to nonterminal dict
Nonterminal VSIB_BASE()::
Nonterminal name VSIB_BASE
read_flat_input 1189
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_R()::
BLines (lines remaining after reading input) = 64144
=============================================
Creating a generator 148
=============================================
ALines (lines before reading input) = 64144
read_input 1207
NONTERMINAL: VGPRy_R type= xed_reg_enum_t
Adding VGPRy_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_R()::
Nonterminal name VGPRy_R
read_flat_input 1207
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_B()::
BLines (lines remaining after reading input) = 64140
=============================================
Creating a generator 149
=============================================
ALines (lines before reading input) = 64140
read_input 1210
NONTERMINAL: VGPRy_B type= xed_reg_enum_t
Adding VGPRy_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_B()::
Nonterminal name VGPRy_B
read_flat_input 1210
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_N()::
BLines (lines remaining after reading input) = 64136
=============================================
Creating a generator 150
=============================================
ALines (lines before reading input) = 64136
read_input 1213
NONTERMINAL: VGPRy_N type= xed_reg_enum_t
Adding VGPRy_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_N()::
Nonterminal name VGPRy_N
read_flat_input 1213
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N()::
BLines (lines remaining after reading input) = 64132
=============================================
Creating a generator 151
=============================================
ALines (lines before reading input) = 64132
read_input 1216
NONTERMINAL: VGPR32_N type= xed_reg_enum_t
Adding VGPR32_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N()::
Nonterminal name VGPR32_N
read_flat_input 1216
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B()::
BLines (lines remaining after reading input) = 64128
=============================================
Creating a generator 152
=============================================
ALines (lines before reading input) = 64128
read_input 1219
NONTERMINAL: VGPR32_B type= xed_reg_enum_t
Adding VGPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B()::
Nonterminal name VGPR32_B
read_flat_input 1219
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R()::
BLines (lines remaining after reading input) = 64124
=============================================
Creating a generator 153
=============================================
ALines (lines before reading input) = 64124
read_input 1222
NONTERMINAL: VGPR32_R type= xed_reg_enum_t
Adding VGPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R()::
Nonterminal name VGPR32_R
read_flat_input 1222
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_32()::
BLines (lines remaining after reading input) = 64120
=============================================
Creating a generator 154
=============================================
ALines (lines before reading input) = 64120
read_input 1225
NONTERMINAL: VGPR32_N_32 type= xed_reg_enum_t
Adding VGPR32_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_32()::
Nonterminal name VGPR32_N_32
read_flat_input 1225
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_64()::
BLines (lines remaining after reading input) = 64111
=============================================
Creating a generator 155
=============================================
ALines (lines before reading input) = 64111
read_input 1233
NONTERMINAL: VGPR32_N_64 type= xed_reg_enum_t
Adding VGPR32_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_64()::
Nonterminal name VGPR32_N_64
read_flat_input 1233
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_N()::
BLines (lines remaining after reading input) = 64094
=============================================
Creating a generator 156
=============================================
ALines (lines before reading input) = 64094
read_input 1249
NONTERMINAL: VGPR64_N type= xed_reg_enum_t
Adding VGPR64_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_N()::
Nonterminal name VGPR64_N
read_flat_input 1249
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_32()::
BLines (lines remaining after reading input) = 64077
=============================================
Creating a generator 157
=============================================
ALines (lines before reading input) = 64077
read_input 1265
NONTERMINAL: VGPR32_R_32 type= xed_reg_enum_t
Adding VGPR32_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_32()::
Nonterminal name VGPR32_R_32
read_flat_input 1265
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_64()::
BLines (lines remaining after reading input) = 64068
=============================================
Creating a generator 158
=============================================
ALines (lines before reading input) = 64068
read_input 1273
NONTERMINAL: VGPR32_R_64 type= xed_reg_enum_t
Adding VGPR32_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_64()::
Nonterminal name VGPR32_R_64
read_flat_input 1273
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_R()::
BLines (lines remaining after reading input) = 64051
=============================================
Creating a generator 159
=============================================
ALines (lines before reading input) = 64051
read_input 1289
NONTERMINAL: VGPR64_R type= xed_reg_enum_t
Adding VGPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_R()::
Nonterminal name VGPR64_R
read_flat_input 1289
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_32()::
BLines (lines remaining after reading input) = 64034
=============================================
Creating a generator 160
=============================================
ALines (lines before reading input) = 64034
read_input 1305
NONTERMINAL: VGPR32_B_32 type= xed_reg_enum_t
Adding VGPR32_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_32()::
Nonterminal name VGPR32_B_32
read_flat_input 1305
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_64()::
BLines (lines remaining after reading input) = 64025
=============================================
Creating a generator 161
=============================================
ALines (lines before reading input) = 64025
read_input 1313
NONTERMINAL: VGPR32_B_64 type= xed_reg_enum_t
Adding VGPR32_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_64()::
Nonterminal name VGPR32_B_64
read_flat_input 1313
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_B()::
BLines (lines remaining after reading input) = 64008
=============================================
Creating a generator 162
=============================================
ALines (lines before reading input) = 64008
read_input 1329
NONTERMINAL: VGPR64_B type= xed_reg_enum_t
Adding VGPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_B()::
Nonterminal name VGPR64_B
read_flat_input 1329
Hit a nonterminal, returning at: NELEM_TUPLE1_4X()::
BLines (lines remaining after reading input) = 63991
=============================================
Creating a generator 163
=============================================
ALines (lines before reading input) = 63991
read_input 1345
NONTERMINAL: NELEM_TUPLE1_4X notype
Adding NELEM_TUPLE1_4X to nonterminal dict
Nonterminal NELEM_TUPLE1_4X()::
Nonterminal name NELEM_TUPLE1_4X
read_flat_input 1345
Hit a nonterminal, returning at: EVEX_SPLITTER()::
BLines (lines remaining after reading input) = 63987
=============================================
Creating a generator 164
=============================================
ALines (lines before reading input) = 63987
read_input 1348
NONTERMINAL: EVEX_SPLITTER notype
Adding EVEX_SPLITTER to nonterminal dict
Nonterminal EVEX_SPLITTER()::
Nonterminal name EVEX_SPLITTER
read_flat_input 1348
Hit a nonterminal, returning at: AVX512_ROUND()::
BLines (lines remaining after reading input) = 63983
=============================================
Creating a generator 165
=============================================
ALines (lines before reading input) = 63983
read_input 1351
NONTERMINAL: AVX512_ROUND notype
Adding AVX512_ROUND to nonterminal dict
Nonterminal AVX512_ROUND()::
Nonterminal name AVX512_ROUND
read_flat_input 1351
Hit a nonterminal, returning at: SAE()::
BLines (lines remaining after reading input) = 63978
=============================================
Creating a generator 166
=============================================
ALines (lines before reading input) = 63978
read_input 1355
NONTERMINAL: SAE notype
Adding SAE to nonterminal dict
Nonterminal SAE()::
Nonterminal name SAE
read_flat_input 1355
Hit a nonterminal, returning at: ESIZE_128_BITS()::
BLines (lines remaining after reading input) = 63975
=============================================
Creating a generator 167
=============================================
ALines (lines before reading input) = 63975
read_input 1357
NONTERMINAL: ESIZE_128_BITS notype
Adding ESIZE_128_BITS to nonterminal dict
Nonterminal ESIZE_128_BITS()::
Nonterminal name ESIZE_128_BITS
read_flat_input 1357
Hit a nonterminal, returning at: ESIZE_64_BITS()::
BLines (lines remaining after reading input) = 63973
=============================================
Creating a generator 168
=============================================
ALines (lines before reading input) = 63973
read_input 1358
NONTERMINAL: ESIZE_64_BITS notype
Adding ESIZE_64_BITS to nonterminal dict
Nonterminal ESIZE_64_BITS()::
Nonterminal name ESIZE_64_BITS
read_flat_input 1358
Hit a nonterminal, returning at: ESIZE_32_BITS()::
BLines (lines remaining after reading input) = 63971
=============================================
Creating a generator 169
=============================================
ALines (lines before reading input) = 63971
read_input 1359
NONTERMINAL: ESIZE_32_BITS notype
Adding ESIZE_32_BITS to nonterminal dict
Nonterminal ESIZE_32_BITS()::
Nonterminal name ESIZE_32_BITS
read_flat_input 1359
Hit a nonterminal, returning at: ESIZE_16_BITS()::
BLines (lines remaining after reading input) = 63969
=============================================
Creating a generator 170
=============================================
ALines (lines before reading input) = 63969
read_input 1360
NONTERMINAL: ESIZE_16_BITS notype
Adding ESIZE_16_BITS to nonterminal dict
Nonterminal ESIZE_16_BITS()::
Nonterminal name ESIZE_16_BITS
read_flat_input 1360
Hit a nonterminal, returning at: ESIZE_8_BITS()::
BLines (lines remaining after reading input) = 63967
=============================================
Creating a generator 171
=============================================
ALines (lines before reading input) = 63967
read_input 1361
NONTERMINAL: ESIZE_8_BITS notype
Adding ESIZE_8_BITS to nonterminal dict
Nonterminal ESIZE_8_BITS()::
Nonterminal name ESIZE_8_BITS
read_flat_input 1361
Hit a nonterminal, returning at: ESIZE_4_BITS()::
BLines (lines remaining after reading input) = 63965
=============================================
Creating a generator 172
=============================================
ALines (lines before reading input) = 63965
read_input 1362
NONTERMINAL: ESIZE_4_BITS notype
Adding ESIZE_4_BITS to nonterminal dict
Nonterminal ESIZE_4_BITS()::
Nonterminal name ESIZE_4_BITS
read_flat_input 1362
Hit a nonterminal, returning at: ESIZE_2_BITS()::
BLines (lines remaining after reading input) = 63963
=============================================
Creating a generator 173
=============================================
ALines (lines before reading input) = 63963
read_input 1363
NONTERMINAL: ESIZE_2_BITS notype
Adding ESIZE_2_BITS to nonterminal dict
Nonterminal ESIZE_2_BITS()::
Nonterminal name ESIZE_2_BITS
read_flat_input 1363
Hit a nonterminal, returning at: ESIZE_1_BITS()::
BLines (lines remaining after reading input) = 63961
=============================================
Creating a generator 174
=============================================
ALines (lines before reading input) = 63961
read_input 1364
NONTERMINAL: ESIZE_1_BITS notype
Adding ESIZE_1_BITS to nonterminal dict
Nonterminal ESIZE_1_BITS()::
Nonterminal name ESIZE_1_BITS
read_flat_input 1364
Hit a nonterminal, returning at: NELEM_MOVDDUP()::
BLines (lines remaining after reading input) = 63959
=============================================
Creating a generator 175
=============================================
ALines (lines before reading input) = 63959
read_input 1365
NONTERMINAL: NELEM_MOVDDUP notype
Adding NELEM_MOVDDUP to nonterminal dict
Nonterminal NELEM_MOVDDUP()::
Nonterminal name NELEM_MOVDDUP
read_flat_input 1365
Hit a nonterminal, returning at: NELEM_FULLMEM()::
BLines (lines remaining after reading input) = 63955
=============================================
Creating a generator 176
=============================================
ALines (lines before reading input) = 63955
read_input 1368
NONTERMINAL: NELEM_FULLMEM notype
Adding NELEM_FULLMEM to nonterminal dict
Nonterminal NELEM_FULLMEM()::
Nonterminal name NELEM_FULLMEM
read_flat_input 1368
Hit a nonterminal, returning at: NELEM_HALFMEM()::
BLines (lines remaining after reading input) = 63924
=============================================
Creating a generator 177
=============================================
ALines (lines before reading input) = 63924
read_input 1398
NONTERMINAL: NELEM_HALFMEM notype
Adding NELEM_HALFMEM to nonterminal dict
Nonterminal NELEM_HALFMEM()::
Nonterminal name NELEM_HALFMEM
read_flat_input 1398
Hit a nonterminal, returning at: NELEM_QUARTERMEM()::
BLines (lines remaining after reading input) = 63893
=============================================
Creating a generator 178
=============================================
ALines (lines before reading input) = 63893
read_input 1428
NONTERMINAL: NELEM_QUARTERMEM notype
Adding NELEM_QUARTERMEM to nonterminal dict
Nonterminal NELEM_QUARTERMEM()::
Nonterminal name NELEM_QUARTERMEM
read_flat_input 1428
Hit a nonterminal, returning at: NELEM_EIGHTHMEM()::
BLines (lines remaining after reading input) = 63862
=============================================
Creating a generator 179
=============================================
ALines (lines before reading input) = 63862
read_input 1458
NONTERMINAL: NELEM_EIGHTHMEM notype
Adding NELEM_EIGHTHMEM to nonterminal dict
Nonterminal NELEM_EIGHTHMEM()::
Nonterminal name NELEM_EIGHTHMEM
read_flat_input 1458
Hit a nonterminal, returning at: NELEM_GPR_READER_BYTE()::
BLines (lines remaining after reading input) = 63831
=============================================
Creating a generator 180
=============================================
ALines (lines before reading input) = 63831
read_input 1488
NONTERMINAL: NELEM_GPR_READER_BYTE notype
Adding NELEM_GPR_READER_BYTE to nonterminal dict
Nonterminal NELEM_GPR_READER_BYTE()::
Nonterminal name NELEM_GPR_READER_BYTE
read_flat_input 1488
Hit a nonterminal, returning at: NELEM_GPR_READER_WORD()::
BLines (lines remaining after reading input) = 63827
=============================================
Creating a generator 181
=============================================
ALines (lines before reading input) = 63827
read_input 1491
NONTERMINAL: NELEM_GPR_READER_WORD notype
Adding NELEM_GPR_READER_WORD to nonterminal dict
Nonterminal NELEM_GPR_READER_WORD()::
Nonterminal name NELEM_GPR_READER_WORD
read_flat_input 1491
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_D()::
BLines (lines remaining after reading input) = 63823
=============================================
Creating a generator 182
=============================================
ALines (lines before reading input) = 63823
read_input 1494
NONTERMINAL: NELEM_GPR_WRITER_LDOP_D notype
Adding NELEM_GPR_WRITER_LDOP_D to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_D()::
Nonterminal name NELEM_GPR_WRITER_LDOP_D
read_flat_input 1494
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_Q()::
BLines (lines remaining after reading input) = 63819
=============================================
Creating a generator 183
=============================================
ALines (lines before reading input) = 63819
read_input 1497
NONTERMINAL: NELEM_GPR_WRITER_LDOP_Q notype
Adding NELEM_GPR_WRITER_LDOP_Q to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_Q()::
Nonterminal name NELEM_GPR_WRITER_LDOP_Q
read_flat_input 1497
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_BYTE()::
BLines (lines remaining after reading input) = 63815
=============================================
Creating a generator 184
=============================================
ALines (lines before reading input) = 63815
read_input 1500
NONTERMINAL: NELEM_GPR_WRITER_STORE_BYTE notype
Adding NELEM_GPR_WRITER_STORE_BYTE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_BYTE()::
Nonterminal name NELEM_GPR_WRITER_STORE_BYTE
read_flat_input 1500
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_WORD()::
BLines (lines remaining after reading input) = 63811
=============================================
Creating a generator 185
=============================================
ALines (lines before reading input) = 63811
read_input 1503
NONTERMINAL: NELEM_GPR_WRITER_STORE_WORD notype
Adding NELEM_GPR_WRITER_STORE_WORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_WORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_WORD
read_flat_input 1503
Hit a nonterminal, returning at: NELEM_TUPLE1_BYTE()::
BLines (lines remaining after reading input) = 63807
=============================================
Creating a generator 186
=============================================
ALines (lines before reading input) = 63807
read_input 1506
NONTERMINAL: NELEM_TUPLE1_BYTE notype
Adding NELEM_TUPLE1_BYTE to nonterminal dict
Nonterminal NELEM_TUPLE1_BYTE()::
Nonterminal name NELEM_TUPLE1_BYTE
read_flat_input 1506
Hit a nonterminal, returning at: NELEM_TUPLE1_WORD()::
BLines (lines remaining after reading input) = 63803
=============================================
Creating a generator 187
=============================================
ALines (lines before reading input) = 63803
read_input 1509
NONTERMINAL: NELEM_TUPLE1_WORD notype
Adding NELEM_TUPLE1_WORD to nonterminal dict
Nonterminal NELEM_TUPLE1_WORD()::
Nonterminal name NELEM_TUPLE1_WORD
read_flat_input 1509
Hit a nonterminal, returning at: NELEM_SCALAR()::
BLines (lines remaining after reading input) = 63799
=============================================
Creating a generator 188
=============================================
ALines (lines before reading input) = 63799
read_input 1512
NONTERMINAL: NELEM_SCALAR notype
Adding NELEM_SCALAR to nonterminal dict
Nonterminal NELEM_SCALAR()::
Nonterminal name NELEM_SCALAR
read_flat_input 1512
Hit a nonterminal, returning at: NELEM_TUPLE1_SUBDWORD()::
BLines (lines remaining after reading input) = 63795
=============================================
Creating a generator 189
=============================================
ALines (lines before reading input) = 63795
read_input 1515
NONTERMINAL: NELEM_TUPLE1_SUBDWORD notype
Adding NELEM_TUPLE1_SUBDWORD to nonterminal dict
Nonterminal NELEM_TUPLE1_SUBDWORD()::
Nonterminal name NELEM_TUPLE1_SUBDWORD
read_flat_input 1515
Hit a nonterminal, returning at: NELEM_GPR_READER()::
BLines (lines remaining after reading input) = 63791
=============================================
Creating a generator 190
=============================================
ALines (lines before reading input) = 63791
read_input 1518
NONTERMINAL: NELEM_GPR_READER notype
Adding NELEM_GPR_READER to nonterminal dict
Nonterminal NELEM_GPR_READER()::
Nonterminal name NELEM_GPR_READER
read_flat_input 1518
Hit a nonterminal, returning at: NELEM_GPR_READER_SUBDWORD()::
BLines (lines remaining after reading input) = 63787
=============================================
Creating a generator 191
=============================================
ALines (lines before reading input) = 63787
read_input 1521
NONTERMINAL: NELEM_GPR_READER_SUBDWORD notype
Adding NELEM_GPR_READER_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_READER_SUBDWORD()::
Nonterminal name NELEM_GPR_READER_SUBDWORD
read_flat_input 1521
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP()::
BLines (lines remaining after reading input) = 63783
=============================================
Creating a generator 192
=============================================
ALines (lines before reading input) = 63783
read_input 1524
NONTERMINAL: NELEM_GPR_WRITER_LDOP notype
Adding NELEM_GPR_WRITER_LDOP to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP()::
Nonterminal name NELEM_GPR_WRITER_LDOP
read_flat_input 1524
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE()::
BLines (lines remaining after reading input) = 63779
=============================================
Creating a generator 193
=============================================
ALines (lines before reading input) = 63779
read_input 1527
NONTERMINAL: NELEM_GPR_WRITER_STORE notype
Adding NELEM_GPR_WRITER_STORE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE()::
Nonterminal name NELEM_GPR_WRITER_STORE
read_flat_input 1527
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_SUBDWORD()::
BLines (lines remaining after reading input) = 63775
=============================================
Creating a generator 194
=============================================
ALines (lines before reading input) = 63775
read_input 1530
NONTERMINAL: NELEM_GPR_WRITER_STORE_SUBDWORD notype
Adding NELEM_GPR_WRITER_STORE_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_SUBDWORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_SUBDWORD
read_flat_input 1530
Hit a nonterminal, returning at: NELEM_TUPLE1()::
BLines (lines remaining after reading input) = 63771
=============================================
Creating a generator 195
=============================================
ALines (lines before reading input) = 63771
read_input 1533
NONTERMINAL: NELEM_TUPLE1 notype
Adding NELEM_TUPLE1 to nonterminal dict
Nonterminal NELEM_TUPLE1()::
Nonterminal name NELEM_TUPLE1
read_flat_input 1533
Hit a nonterminal, returning at: NELEM_GSCAT()::
BLines (lines remaining after reading input) = 63767
=============================================
Creating a generator 196
=============================================
ALines (lines before reading input) = 63767
read_input 1536
NONTERMINAL: NELEM_GSCAT notype
Adding NELEM_GSCAT to nonterminal dict
Nonterminal NELEM_GSCAT()::
Nonterminal name NELEM_GSCAT
read_flat_input 1536
Hit a nonterminal, returning at: NELEM_TUPLE2()::
BLines (lines remaining after reading input) = 63763
=============================================
Creating a generator 197
=============================================
ALines (lines before reading input) = 63763
read_input 1539
NONTERMINAL: NELEM_TUPLE2 notype
Adding NELEM_TUPLE2 to nonterminal dict
Nonterminal NELEM_TUPLE2()::
Nonterminal name NELEM_TUPLE2
read_flat_input 1539
Hit a nonterminal, returning at: NELEM_TUPLE4()::
BLines (lines remaining after reading input) = 63759
=============================================
Creating a generator 198
=============================================
ALines (lines before reading input) = 63759
read_input 1542
NONTERMINAL: NELEM_TUPLE4 notype
Adding NELEM_TUPLE4 to nonterminal dict
Nonterminal NELEM_TUPLE4()::
Nonterminal name NELEM_TUPLE4
read_flat_input 1542
Hit a nonterminal, returning at: NELEM_TUPLE8()::
BLines (lines remaining after reading input) = 63755
=============================================
Creating a generator 199
=============================================
ALines (lines before reading input) = 63755
read_input 1545
NONTERMINAL: NELEM_TUPLE8 notype
Adding NELEM_TUPLE8 to nonterminal dict
Nonterminal NELEM_TUPLE8()::
Nonterminal name NELEM_TUPLE8
read_flat_input 1545
Hit a nonterminal, returning at: NELEM_MEM128()::
BLines (lines remaining after reading input) = 63751
=============================================
Creating a generator 200
=============================================
ALines (lines before reading input) = 63751
read_input 1548
NONTERMINAL: NELEM_MEM128 notype
Adding NELEM_MEM128 to nonterminal dict
Nonterminal NELEM_MEM128()::
Nonterminal name NELEM_MEM128
read_flat_input 1548
Hit a nonterminal, returning at: NELEM_FULL()::
BLines (lines remaining after reading input) = 63748
=============================================
Creating a generator 201
=============================================
ALines (lines before reading input) = 63748
read_input 1550
NONTERMINAL: NELEM_FULL notype
Adding NELEM_FULL to nonterminal dict
Nonterminal NELEM_FULL()::
Nonterminal name NELEM_FULL
read_flat_input 1550
Hit a nonterminal, returning at: NELEM_HALF()::
BLines (lines remaining after reading input) = 63729
=============================================
Creating a generator 202
=============================================
ALines (lines before reading input) = 63729
read_input 1568
NONTERMINAL: NELEM_HALF notype
Adding NELEM_HALF to nonterminal dict
Nonterminal NELEM_HALF()::
Nonterminal name NELEM_HALF
read_flat_input 1568
Hit a nonterminal, returning at: FIX_ROUND_LEN512()::
BLines (lines remaining after reading input) = 63722
=============================================
Creating a generator 203
=============================================
ALines (lines before reading input) = 63722
read_input 1574
NONTERMINAL: FIX_ROUND_LEN512 notype
Adding FIX_ROUND_LEN512 to nonterminal dict
Nonterminal FIX_ROUND_LEN512()::
Nonterminal name FIX_ROUND_LEN512
read_flat_input 1574
Hit a nonterminal, returning at: FIX_ROUND_LEN128()::
BLines (lines remaining after reading input) = 63718
=============================================
Creating a generator 204
=============================================
ALines (lines before reading input) = 63718
read_input 1577
NONTERMINAL: FIX_ROUND_LEN128 notype
Adding FIX_ROUND_LEN128 to nonterminal dict
Nonterminal FIX_ROUND_LEN128()::
Nonterminal name FIX_ROUND_LEN128
read_flat_input 1577
Hit a nonterminal, returning at: UISA_VMODRM_ZMM()::
BLines (lines remaining after reading input) = 63714
=============================================
Creating a generator 205
=============================================
ALines (lines before reading input) = 63714
read_input 1580
NONTERMINAL: UISA_VMODRM_ZMM notype
Adding UISA_VMODRM_ZMM to nonterminal dict
Nonterminal UISA_VMODRM_ZMM()::
Nonterminal name UISA_VMODRM_ZMM
read_flat_input 1580
Hit a nonterminal, returning at: UISA_VMODRM_YMM()::
BLines (lines remaining after reading input) = 63710
=============================================
Creating a generator 206
=============================================
ALines (lines before reading input) = 63710
read_input 1583
NONTERMINAL: UISA_VMODRM_YMM notype
Adding UISA_VMODRM_YMM to nonterminal dict
Nonterminal UISA_VMODRM_YMM()::
Nonterminal name UISA_VMODRM_YMM
read_flat_input 1583
Hit a nonterminal, returning at: UISA_VMODRM_XMM()::
BLines (lines remaining after reading input) = 63706
=============================================
Creating a generator 207
=============================================
ALines (lines before reading input) = 63706
read_input 1586
NONTERMINAL: UISA_VMODRM_XMM notype
Adding UISA_VMODRM_XMM to nonterminal dict
Nonterminal UISA_VMODRM_XMM()::
Nonterminal name UISA_VMODRM_XMM
read_flat_input 1586
Hit a nonterminal, returning at: UISA_VSIB_ZMM()::
BLines (lines remaining after reading input) = 63702
=============================================
Creating a generator 208
=============================================
ALines (lines before reading input) = 63702
read_input 1589
NONTERMINAL: UISA_VSIB_ZMM notype
Adding UISA_VSIB_ZMM to nonterminal dict
Nonterminal UISA_VSIB_ZMM()::
Nonterminal name UISA_VSIB_ZMM
read_flat_input 1589
Hit a nonterminal, returning at: UISA_VSIB_YMM()::
BLines (lines remaining after reading input) = 63697
=============================================
Creating a generator 209
=============================================
ALines (lines before reading input) = 63697
read_input 1593
NONTERMINAL: UISA_VSIB_YMM notype
Adding UISA_VSIB_YMM to nonterminal dict
Nonterminal UISA_VSIB_YMM()::
Nonterminal name UISA_VSIB_YMM
read_flat_input 1593
Hit a nonterminal, returning at: UISA_VSIB_XMM()::
BLines (lines remaining after reading input) = 63692
=============================================
Creating a generator 210
=============================================
ALines (lines before reading input) = 63692
read_input 1597
NONTERMINAL: UISA_VSIB_XMM notype
Adding UISA_VSIB_XMM to nonterminal dict
Nonterminal UISA_VSIB_XMM()::
Nonterminal name UISA_VSIB_XMM
read_flat_input 1597
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
BLines (lines remaining after reading input) = 63687
=============================================
Creating a generator 211
=============================================
ALines (lines before reading input) = 63687
read_input 1601
NONTERMINAL: UISA_VSIB_INDEX_ZMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_ZMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
Nonterminal name UISA_VSIB_INDEX_ZMM
read_flat_input 1601
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 63654
=============================================
Creating a generator 212
=============================================
ALines (lines before reading input) = 63654
read_input 1633
NONTERMINAL: UISA_VSIB_INDEX_YMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
Nonterminal name UISA_VSIB_INDEX_YMM
read_flat_input 1633
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 63621
=============================================
Creating a generator 213
=============================================
ALines (lines before reading input) = 63621
read_input 1665
NONTERMINAL: UISA_VSIB_INDEX_XMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
Nonterminal name UISA_VSIB_INDEX_XMM
read_flat_input 1665
Hit a nonterminal, returning at: UISA_VSIB_BASE()::
BLines (lines remaining after reading input) = 63588
=============================================
Creating a generator 214
=============================================
ALines (lines before reading input) = 63588
read_input 1697
NONTERMINAL: UISA_VSIB_BASE notype
Adding UISA_VSIB_BASE to nonterminal dict
Nonterminal UISA_VSIB_BASE()::
Nonterminal name UISA_VSIB_BASE
read_flat_input 1697
Hit a nonterminal, returning at: xed_reg_enum_t MASK1()::
BLines (lines remaining after reading input) = 63569
=============================================
Creating a generator 215
=============================================
ALines (lines before reading input) = 63569
read_input 1715
NONTERMINAL: MASK1 type= xed_reg_enum_t
Adding MASK1 to nonterminal dict
Nonterminal xed_reg_enum_t MASK1()::
Nonterminal name MASK1
read_flat_input 1715
Hit a nonterminal, returning at: xed_reg_enum_t MASKNOT0()::
BLines (lines remaining after reading input) = 63560
=============================================
Creating a generator 216
=============================================
ALines (lines before reading input) = 63560
read_input 1723
NONTERMINAL: MASKNOT0 type= xed_reg_enum_t
Adding MASKNOT0 to nonterminal dict
Nonterminal xed_reg_enum_t MASKNOT0()::
Nonterminal name MASKNOT0
read_flat_input 1723
Hit a nonterminal, returning at: xed_reg_enum_t MASK_R()::
BLines (lines remaining after reading input) = 63551
=============================================
Creating a generator 217
=============================================
ALines (lines before reading input) = 63551
read_input 1731
NONTERMINAL: MASK_R type= xed_reg_enum_t
Adding MASK_R to nonterminal dict
Nonterminal xed_reg_enum_t MASK_R()::
Nonterminal name MASK_R
read_flat_input 1731
Hit a nonterminal, returning at: xed_reg_enum_t MASK_B()::
BLines (lines remaining after reading input) = 63542
=============================================
Creating a generator 218
=============================================
ALines (lines before reading input) = 63542
read_input 1739
NONTERMINAL: MASK_B type= xed_reg_enum_t
Adding MASK_B to nonterminal dict
Nonterminal xed_reg_enum_t MASK_B()::
Nonterminal name MASK_B
read_flat_input 1739
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N()::
BLines (lines remaining after reading input) = 63533
=============================================
Creating a generator 219
=============================================
ALines (lines before reading input) = 63533
read_input 1747
NONTERMINAL: MASK_N type= xed_reg_enum_t
Adding MASK_N to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N()::
Nonterminal name MASK_N
read_flat_input 1747
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N64()::
BLines (lines remaining after reading input) = 63529
=============================================
Creating a generator 220
=============================================
ALines (lines before reading input) = 63529
read_input 1750
NONTERMINAL: MASK_N64 type= xed_reg_enum_t
Adding MASK_N64 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N64()::
Nonterminal name MASK_N64
read_flat_input 1750
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N32()::
BLines (lines remaining after reading input) = 63520
=============================================
Creating a generator 221
=============================================
ALines (lines before reading input) = 63520
read_input 1758
NONTERMINAL: MASK_N32 type= xed_reg_enum_t
Adding MASK_N32 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N32()::
Nonterminal name MASK_N32
read_flat_input 1758
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3()::
BLines (lines remaining after reading input) = 63511
=============================================
Creating a generator 222
=============================================
ALines (lines before reading input) = 63511
read_input 1766
NONTERMINAL: XMM_R3 type= xed_reg_enum_t
Adding XMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3()::
Nonterminal name XMM_R3
read_flat_input 1766
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_32()::
BLines (lines remaining after reading input) = 63507
=============================================
Creating a generator 223
=============================================
ALines (lines before reading input) = 63507
read_input 1769
NONTERMINAL: XMM_R3_32 type= xed_reg_enum_t
Adding XMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_32()::
Nonterminal name XMM_R3_32
read_flat_input 1769
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_64()::
BLines (lines remaining after reading input) = 63498
=============================================
Creating a generator 224
=============================================
ALines (lines before reading input) = 63498
read_input 1777
NONTERMINAL: XMM_R3_64 type= xed_reg_enum_t
Adding XMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_64()::
Nonterminal name XMM_R3_64
read_flat_input 1777
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3()::
BLines (lines remaining after reading input) = 63465
=============================================
Creating a generator 225
=============================================
ALines (lines before reading input) = 63465
read_input 1809
NONTERMINAL: YMM_R3 type= xed_reg_enum_t
Adding YMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3()::
Nonterminal name YMM_R3
read_flat_input 1809
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_32()::
BLines (lines remaining after reading input) = 63461
=============================================
Creating a generator 226
=============================================
ALines (lines before reading input) = 63461
read_input 1812
NONTERMINAL: YMM_R3_32 type= xed_reg_enum_t
Adding YMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_32()::
Nonterminal name YMM_R3_32
read_flat_input 1812
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_64()::
BLines (lines remaining after reading input) = 63452
=============================================
Creating a generator 227
=============================================
ALines (lines before reading input) = 63452
read_input 1820
NONTERMINAL: YMM_R3_64 type= xed_reg_enum_t
Adding YMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_64()::
Nonterminal name YMM_R3_64
read_flat_input 1820
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3()::
BLines (lines remaining after reading input) = 63419
=============================================
Creating a generator 228
=============================================
ALines (lines before reading input) = 63419
read_input 1852
NONTERMINAL: ZMM_R3 type= xed_reg_enum_t
Adding ZMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3()::
Nonterminal name ZMM_R3
read_flat_input 1852
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_32()::
BLines (lines remaining after reading input) = 63415
=============================================
Creating a generator 229
=============================================
ALines (lines before reading input) = 63415
read_input 1855
NONTERMINAL: ZMM_R3_32 type= xed_reg_enum_t
Adding ZMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_32()::
Nonterminal name ZMM_R3_32
read_flat_input 1855
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_64()::
BLines (lines remaining after reading input) = 63406
=============================================
Creating a generator 230
=============================================
ALines (lines before reading input) = 63406
read_input 1863
NONTERMINAL: ZMM_R3_64 type= xed_reg_enum_t
Adding ZMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_64()::
Nonterminal name ZMM_R3_64
read_flat_input 1863
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3()::
BLines (lines remaining after reading input) = 63373
=============================================
Creating a generator 231
=============================================
ALines (lines before reading input) = 63373
read_input 1895
NONTERMINAL: XMM_B3 type= xed_reg_enum_t
Adding XMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3()::
Nonterminal name XMM_B3
read_flat_input 1895
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_32()::
BLines (lines remaining after reading input) = 63369
=============================================
Creating a generator 232
=============================================
ALines (lines before reading input) = 63369
read_input 1898
NONTERMINAL: XMM_B3_32 type= xed_reg_enum_t
Adding XMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_32()::
Nonterminal name XMM_B3_32
read_flat_input 1898
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_64()::
BLines (lines remaining after reading input) = 63360
=============================================
Creating a generator 233
=============================================
ALines (lines before reading input) = 63360
read_input 1906
NONTERMINAL: XMM_B3_64 type= xed_reg_enum_t
Adding XMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_64()::
Nonterminal name XMM_B3_64
read_flat_input 1906
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3()::
BLines (lines remaining after reading input) = 63327
=============================================
Creating a generator 234
=============================================
ALines (lines before reading input) = 63327
read_input 1938
NONTERMINAL: YMM_B3 type= xed_reg_enum_t
Adding YMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3()::
Nonterminal name YMM_B3
read_flat_input 1938
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_32()::
BLines (lines remaining after reading input) = 63323
=============================================
Creating a generator 235
=============================================
ALines (lines before reading input) = 63323
read_input 1941
NONTERMINAL: YMM_B3_32 type= xed_reg_enum_t
Adding YMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_32()::
Nonterminal name YMM_B3_32
read_flat_input 1941
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_64()::
BLines (lines remaining after reading input) = 63314
=============================================
Creating a generator 236
=============================================
ALines (lines before reading input) = 63314
read_input 1949
NONTERMINAL: YMM_B3_64 type= xed_reg_enum_t
Adding YMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_64()::
Nonterminal name YMM_B3_64
read_flat_input 1949
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3()::
BLines (lines remaining after reading input) = 63281
=============================================
Creating a generator 237
=============================================
ALines (lines before reading input) = 63281
read_input 1981
NONTERMINAL: ZMM_B3 type= xed_reg_enum_t
Adding ZMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3()::
Nonterminal name ZMM_B3
read_flat_input 1981
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_32()::
BLines (lines remaining after reading input) = 63277
=============================================
Creating a generator 238
=============================================
ALines (lines before reading input) = 63277
read_input 1984
NONTERMINAL: ZMM_B3_32 type= xed_reg_enum_t
Adding ZMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_32()::
Nonterminal name ZMM_B3_32
read_flat_input 1984
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_64()::
BLines (lines remaining after reading input) = 63268
=============================================
Creating a generator 239
=============================================
ALines (lines before reading input) = 63268
read_input 1992
NONTERMINAL: ZMM_B3_64 type= xed_reg_enum_t
Adding ZMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_64()::
Nonterminal name ZMM_B3_64
read_flat_input 1992
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3()::
BLines (lines remaining after reading input) = 63235
=============================================
Creating a generator 240
=============================================
ALines (lines before reading input) = 63235
read_input 2024
NONTERMINAL: XMM_N3 type= xed_reg_enum_t
Adding XMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3()::
Nonterminal name XMM_N3
read_flat_input 2024
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_32()::
BLines (lines remaining after reading input) = 63231
=============================================
Creating a generator 241
=============================================
ALines (lines before reading input) = 63231
read_input 2027
NONTERMINAL: XMM_N3_32 type= xed_reg_enum_t
Adding XMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_32()::
Nonterminal name XMM_N3_32
read_flat_input 2027
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_64()::
BLines (lines remaining after reading input) = 63222
=============================================
Creating a generator 242
=============================================
ALines (lines before reading input) = 63222
read_input 2035
NONTERMINAL: XMM_N3_64 type= xed_reg_enum_t
Adding XMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_64()::
Nonterminal name XMM_N3_64
read_flat_input 2035
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3()::
BLines (lines remaining after reading input) = 63189
=============================================
Creating a generator 243
=============================================
ALines (lines before reading input) = 63189
read_input 2067
NONTERMINAL: YMM_N3 type= xed_reg_enum_t
Adding YMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3()::
Nonterminal name YMM_N3
read_flat_input 2067
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_32()::
BLines (lines remaining after reading input) = 63185
=============================================
Creating a generator 244
=============================================
ALines (lines before reading input) = 63185
read_input 2070
NONTERMINAL: YMM_N3_32 type= xed_reg_enum_t
Adding YMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_32()::
Nonterminal name YMM_N3_32
read_flat_input 2070
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_64()::
BLines (lines remaining after reading input) = 63176
=============================================
Creating a generator 245
=============================================
ALines (lines before reading input) = 63176
read_input 2078
NONTERMINAL: YMM_N3_64 type= xed_reg_enum_t
Adding YMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_64()::
Nonterminal name YMM_N3_64
read_flat_input 2078
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3()::
BLines (lines remaining after reading input) = 63143
=============================================
Creating a generator 246
=============================================
ALines (lines before reading input) = 63143
read_input 2110
NONTERMINAL: ZMM_N3 type= xed_reg_enum_t
Adding ZMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3()::
Nonterminal name ZMM_N3
read_flat_input 2110
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_32()::
BLines (lines remaining after reading input) = 63139
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 63139
read_input 2113
NONTERMINAL: ZMM_N3_32 type= xed_reg_enum_t
Adding ZMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_32()::
Nonterminal name ZMM_N3_32
read_flat_input 2113
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_64()::
BLines (lines remaining after reading input) = 63130
=============================================
Creating a generator 248
=============================================
ALines (lines before reading input) = 63130
read_input 2121
NONTERMINAL: ZMM_N3_64 type= xed_reg_enum_t
Adding ZMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_64()::
Nonterminal name ZMM_N3_64
read_flat_input 2121
Hit a nonterminal, returning at: xed_reg_enum_t TMM_R()::
BLines (lines remaining after reading input) = 63097
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 63097
read_input 2153
NONTERMINAL: TMM_R type= xed_reg_enum_t
Adding TMM_R to nonterminal dict
Nonterminal xed_reg_enum_t TMM_R()::
Nonterminal name TMM_R
read_flat_input 2153
Hit a nonterminal, returning at: xed_reg_enum_t TMM_B()::
BLines (lines remaining after reading input) = 63088
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 63088
read_input 2161
NONTERMINAL: TMM_B type= xed_reg_enum_t
Adding TMM_B to nonterminal dict
Nonterminal xed_reg_enum_t TMM_B()::
Nonterminal name TMM_B
read_flat_input 2161
Hit a nonterminal, returning at: xed_reg_enum_t TMM_N()::
BLines (lines remaining after reading input) = 63079
=============================================
Creating a generator 251
=============================================
ALines (lines before reading input) = 63079
read_input 2169
NONTERMINAL: TMM_N type= xed_reg_enum_t
Adding TMM_N to nonterminal dict
Nonterminal xed_reg_enum_t TMM_N()::
Nonterminal name TMM_N
read_flat_input 2169
Hit a nonterminal, returning at: INSTRUCTIONS()::
BLines (lines remaining after reading input) = 63070
=============================================
Creating a generator 252
=============================================
ALines (lines before reading input) = 63070
read_input 2177
NONTERMINAL: INSTRUCTIONS notype
Adding INSTRUCTIONS to nonterminal dict
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48790 lines remaining.
BLines (lines remaining after reading input) = 48790
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48790
read_input 4086
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48711 lines remaining.
BLines (lines remaining after reading input) = 48711
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48711
read_input 4095
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1A
REGISTERING UDELETE NOP0F1B
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48546 lines remaining.
BLines (lines remaining after reading input) = 48546
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48546
read_input 4128
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1E
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48459 lines remaining.
BLines (lines remaining after reading input) = 48459
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48459
read_input 4148
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48304 lines remaining.
BLines (lines remaining after reading input) = 48304
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48304
read_input 4162
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48293 lines remaining.
BLines (lines remaining after reading input) = 48293
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48293
read_input 4163
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48117 lines remaining.
BLines (lines remaining after reading input) = 48117
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48117
read_input 4177
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48096 lines remaining.
BLines (lines remaining after reading input) = 48096
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48096
read_input 4179
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48055 lines remaining.
BLines (lines remaining after reading input) = 48055
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48055
read_input 4183
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48034 lines remaining.
BLines (lines remaining after reading input) = 48034
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48034
read_input 4185
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48023 lines remaining.
BLines (lines remaining after reading input) = 48023
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48023
read_input 4186
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48012 lines remaining.
BLines (lines remaining after reading input) = 48012
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 48012
read_input 4187
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47977 lines remaining.
BLines (lines remaining after reading input) = 47977
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47977
read_input 4191
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47958 lines remaining.
BLines (lines remaining after reading input) = 47958
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47958
read_input 4193
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47937 lines remaining.
BLines (lines remaining after reading input) = 47937
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47937
read_input 4195
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47914 lines remaining.
BLines (lines remaining after reading input) = 47914
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47914
read_input 4197
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47902 lines remaining.
BLines (lines remaining after reading input) = 47902
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47902
read_input 4199
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47864 lines remaining.
BLines (lines remaining after reading input) = 47864
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47864
read_input 4203
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47826 lines remaining.
BLines (lines remaining after reading input) = 47826
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47826
read_input 4206
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1C
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47761 lines remaining.
BLines (lines remaining after reading input) = 47761
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47761
read_input 4218
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47749 lines remaining.
BLines (lines remaining after reading input) = 47749
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47749
read_input 4219
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 47737 lines remaining.
BLines (lines remaining after reading input) = 47737
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 47737
read_input 4220
NONTERMINAL: AVX_INSTRUCTIONS notype
Adding AVX_INSTRUCTIONS to nonterminal dict
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 44299 lines remaining.
BLines (lines remaining after reading input) = 44299
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 44299
read_input 4943
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 44268 lines remaining.
BLines (lines remaining after reading input) = 44268
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 44268
read_input 4946
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 44201 lines remaining.
BLines (lines remaining after reading input) = 44201
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 44201
read_input 4958
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 44189 lines remaining.
BLines (lines remaining after reading input) = 44189
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 44189
read_input 4960
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 44154 lines remaining.
BLines (lines remaining after reading input) = 44154
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 44154
read_input 4968
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43289 lines remaining.
BLines (lines remaining after reading input) = 43289
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 43289
read_input 5160
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43168 lines remaining.
BLines (lines remaining after reading input) = 43168
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 43168
read_input 5176
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 41688 lines remaining.
BLines (lines remaining after reading input) = 41688
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41688
read_input 5441
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 41612 lines remaining.
BLines (lines remaining after reading input) = 41612
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41612
read_input 5461
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 41601 lines remaining.
BLines (lines remaining after reading input) = 41601
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41601
read_input 5462
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 41360 lines remaining.
BLines (lines remaining after reading input) = 41360
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41360
read_input 5540
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 41330 lines remaining.
BLines (lines remaining after reading input) = 41330
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41330
read_input 5546
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 41319 lines remaining.
BLines (lines remaining after reading input) = 41319
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41319
read_input 5547
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 41305 lines remaining.
BLines (lines remaining after reading input) = 41305
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41305
read_input 5549
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 41273 lines remaining.
BLines (lines remaining after reading input) = 41273
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41273
read_input 5555
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 41235 lines remaining.
BLines (lines remaining after reading input) = 41235
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41235
read_input 5559
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 41202 lines remaining.
BLines (lines remaining after reading input) = 41202
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41202
read_input 5567
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 41181 lines remaining.
BLines (lines remaining after reading input) = 41181
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41181
read_input 5569
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 41170 lines remaining.
BLines (lines remaining after reading input) = 41170
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 41170
read_input 5570
NONTERMINAL: EVEX_INSTRUCTIONS notype
Adding EVEX_INSTRUCTIONS to nonterminal dict
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 40857 lines remaining.
BLines (lines remaining after reading input) = 40857
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 40857
read_input 5594
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40622 lines remaining.
BLines (lines remaining after reading input) = 40622
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 40622
read_input 5612
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE PREFETCH_RESERVED_0F0Dr2
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 40620 lines remaining.
BLines (lines remaining after reading input) = 40620
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 40620
read_input 5612
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40021 lines remaining.
BLines (lines remaining after reading input) = 40021
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 40021
read_input 5658
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 40008 lines remaining.
BLines (lines remaining after reading input) = 40008
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 40008
read_input 5659
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39955 lines remaining.
BLines (lines remaining after reading input) = 39955
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 39955
read_input 5663
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39928 lines remaining.
BLines (lines remaining after reading input) = 39928
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 39928
read_input 5665
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39875 lines remaining.
BLines (lines remaining after reading input) = 39875
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 39875
read_input 5669
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 28276 lines remaining.
BLines (lines remaining after reading input) = 28276
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 28276
read_input 6592
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 28079 lines remaining.
BLines (lines remaining after reading input) = 28079
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 28079
read_input 6607
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 27950 lines remaining.
BLines (lines remaining after reading input) = 27950
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 27950
read_input 6617
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 4578 lines remaining.
BLines (lines remaining after reading input) = 4578
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 4578
read_input 8423
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 3886 lines remaining.
BLines (lines remaining after reading input) = 3886
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 3886
read_input 8477
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 3729 lines remaining.
BLines (lines remaining after reading input) = 3729
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 3729
read_input 8489
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 3416 lines remaining.
BLines (lines remaining after reading input) = 3416
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 3416
read_input 8513
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 3392 lines remaining.
BLines (lines remaining after reading input) = 3392
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 3392
read_input 8516
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 3376 lines remaining.
BLines (lines remaining after reading input) = 3376
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 3376
read_input 8518
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 3141 lines remaining.
BLines (lines remaining after reading input) = 3141
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 3141
read_input 8536
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 1892 lines remaining.
BLines (lines remaining after reading input) = 1892
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 1892
read_input 8632
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 1816 lines remaining.
BLines (lines remaining after reading input) = 1816
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 1816
read_input 8638
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 1581 lines remaining.
BLines (lines remaining after reading input) = 1581
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 1581
read_input 8656
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 1436 lines remaining.
BLines (lines remaining after reading input) = 1436
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 1436
read_input 8668
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 1060 lines remaining.
BLines (lines remaining after reading input) = 1060
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 1060
read_input 8698
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 939 lines remaining.
BLines (lines remaining after reading input) = 939
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 939
read_input 8708
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 834 lines remaining.
BLines (lines remaining after reading input) = 834
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 834
read_input 8716
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 677 lines remaining.
BLines (lines remaining after reading input) = 677
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 677
read_input 8728
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 544 lines remaining.
BLines (lines remaining after reading input) = 544
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 544
read_input 8739
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 532 lines remaining.
BLines (lines remaining after reading input) = 532
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 532
read_input 8740
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 339 lines remaining.
BLines (lines remaining after reading input) = 339
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 339
read_input 8756
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 281 lines remaining.
BLines (lines remaining after reading input) = 281
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 281
read_input 8761
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 124 lines remaining.
BLines (lines remaining after reading input) = 124
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 124
read_input 8773
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 99 lines remaining.
BLines (lines remaining after reading input) = 99
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 99
read_input 8775
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 76 lines remaining.
BLines (lines remaining after reading input) = 76
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 76
read_input 8777
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 64 lines remaining.
BLines (lines remaining after reading input) = 64
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 64
read_input 8778
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
parser returning with 0 lines remaining.
BLines (lines remaining after reading input) = 0
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1E
DROPPING UNAME NOP0F1E
DROPPING UNAME PREFETCH_RESERVED_0F0Dr2
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
Length error: some instructions done and some are not done simultaneously
ilist len = 20


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29


NODE:
	NOP inum=4132  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

	NOP inum=4133  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

	NOP inum=4134  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4135  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

	NOP inum=4136  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4137  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3

	NOP inum=4138  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4139  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4140  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4141  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4142  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4143  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4144  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4145  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=4146  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4147  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	ENDBR32 inum=4149  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4150  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	RDSSPD inum=4153  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	RDSSPQ inum=4154  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 21
back_split_graph: based on 21
BACKSPLIT  fake bitpos: 21 real bitpos: 20


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4132  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=4133  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=4135  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

   NOP inum=4137  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 20
NEED TO BACKSPLIT AT POSITION 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4132  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=4135  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4133  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=4137  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 16


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29


NODE:
	NOP inum=4134  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4136  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4138  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4139  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4140  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4141  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4142  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4143  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4144  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4145  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=4146  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4147  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	ENDBR32 inum=4149  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4150  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	RDSSPD inum=4153  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	RDSSPQ inum=4154  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29


NODE:
	NOP inum=4136  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4146  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4147  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	RDSSPD inum=4153  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	RDSSPQ inum=4154  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 11


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4134  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4138  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4139  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4140  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4141  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4142  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4143  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4144  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4145  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4149  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4150  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 10


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4138  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4139  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4140  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4141  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4142  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4143  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4144  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4145  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4149  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4150  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 24
back_split_graph: based on 24
BACKSPLIT  fake bitpos: 24 real bitpos: 23

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4138  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4140  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4142  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4144  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=4150  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4138  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

   NOP inum=4140  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4142  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4144  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=4150  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4139  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4141  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4143  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4145  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4149  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4139  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

   NOP inum=4141  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4143  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4145  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4149  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

FUNKY SPOT: bitpos 36
Others: 
MOVDIRI inum=4201  iform_input=MOVDIRI_MEMu32_GPR32u32  isa_set=MOVDIR pattern len=37
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    REXW=0

MOVDIRI inum=4202  iform_input=MOVDIRI_MEMu64_GPR64u64  isa_set=MOVDIR pattern len=38
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    MODE=2 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING MOVDIRI inum 4201 -- already fine
	REARRANGE needs to juggle: MOVDIRI inum 4202
	REARRANGE one pattern worked for MOVDIRI inum 4202
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 36
FUNKY SPOT: bitpos 10
Others: 
VPSHUFB inum=5298  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSHUFB inum=5299  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPERMQ inum=5409  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMQ inum=5410  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSHUFB inum 5298 -- already fine
	SKIPPING VPSHUFB inum 5299 -- already fine
	REARRANGE needs to juggle: VPERMQ inum 5409
	REARRANGE one pattern worked for VPERMQ inum 5409
	REARRANGE needs to juggle: VPERMQ inum 5410
	REARRANGE one pattern worked for VPERMQ inum 5410
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 10
Others: 
VPHADDW inum=5242  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPHADDW inum=5243  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPERMPD inum=5411  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMPD inum=5412  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPHADDW inum 5242 -- already fine
	SKIPPING VPHADDW inum 5243 -- already fine
	REARRANGE needs to juggle: VPERMPD inum 5411
	REARRANGE one pattern worked for VPERMPD inum 5411
	REARRANGE needs to juggle: VPERMPD inum 5412
	REARRANGE one pattern worked for VPERMPD inum 5412
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSIGND inum=4640  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=4641  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=5304  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5305  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSS inum=4692  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=4693  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSIGND inum 4640 -- already fine
	SKIPPING VPSIGND inum 4641 -- already fine
	SKIPPING VPSIGND inum 5304 -- already fine
	SKIPPING VPSIGND inum 5305 -- already fine
	REARRANGE needs to juggle: VROUNDSS inum 4692
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPSIGND inum 4640
	REARRANGE one pattern worked for VPSIGND inum 4640
	REARRANGE needs to juggle: VPSIGND inum 4641
	REARRANGE one pattern worked for VPSIGND inum 4641
	REARRANGE needs to juggle: VPSIGND inum 5304
	REARRANGE one pattern worked for VPSIGND inum 5304
	REARRANGE needs to juggle: VPSIGND inum 5305
	REARRANGE one pattern worked for VPSIGND inum 5305
	SKIPPING VROUNDSS inum 4692 -- already fine
	SKIPPING VROUNDSS inum 4693 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSIGND inum=4640  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=4641  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=5304  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5305  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSS inum=4692  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=4693  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSIGND inum 4640 -- already fine
	SKIPPING VPSIGND inum 4641 -- already fine
	SKIPPING VPSIGND inum 5304 -- already fine
	SKIPPING VPSIGND inum 5305 -- already fine
	REARRANGE needs to juggle: VROUNDSS inum 4692
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPSIGND inum 4640
	REARRANGE one pattern worked for VPSIGND inum 4640
	REARRANGE needs to juggle: VPSIGND inum 4641
	REARRANGE one pattern worked for VPSIGND inum 4641
	REARRANGE needs to juggle: VPSIGND inum 5304
	REARRANGE one pattern worked for VPSIGND inum 5304
	REARRANGE needs to juggle: VPSIGND inum 5305
	REARRANGE one pattern worked for VPSIGND inum 5305
	SKIPPING VROUNDSS inum 4692 -- already fine
	SKIPPING VROUNDSS inum 4693 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPMULHRSW inum=4620  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=4621  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=5284  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5285  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSD inum=4690  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=4691  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHRSW inum 4620 -- already fine
	SKIPPING VPMULHRSW inum 4621 -- already fine
	SKIPPING VPMULHRSW inum 5284 -- already fine
	SKIPPING VPMULHRSW inum 5285 -- already fine
	REARRANGE needs to juggle: VROUNDSD inum 4690
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPMULHRSW inum 4620
	REARRANGE one pattern worked for VPMULHRSW inum 4620
	REARRANGE needs to juggle: VPMULHRSW inum 4621
	REARRANGE one pattern worked for VPMULHRSW inum 4621
	REARRANGE needs to juggle: VPMULHRSW inum 5284
	REARRANGE one pattern worked for VPMULHRSW inum 5284
	REARRANGE needs to juggle: VPMULHRSW inum 5285
	REARRANGE one pattern worked for VPMULHRSW inum 5285
	SKIPPING VROUNDSD inum 4690 -- already fine
	SKIPPING VROUNDSD inum 4691 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPMULHRSW inum=4620  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=4621  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=5284  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5285  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSD inum=4690  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=4691  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHRSW inum 4620 -- already fine
	SKIPPING VPMULHRSW inum 4621 -- already fine
	SKIPPING VPMULHRSW inum 5284 -- already fine
	SKIPPING VPMULHRSW inum 5285 -- already fine
	REARRANGE needs to juggle: VROUNDSD inum 4690
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPMULHRSW inum 4620
	REARRANGE one pattern worked for VPMULHRSW inum 4620
	REARRANGE needs to juggle: VPMULHRSW inum 4621
	REARRANGE one pattern worked for VPMULHRSW inum 4621
	REARRANGE needs to juggle: VPMULHRSW inum 5284
	REARRANGE one pattern worked for VPMULHRSW inum 5284
	REARRANGE needs to juggle: VPMULHRSW inum 5285
	REARRANGE one pattern worked for VPMULHRSW inum 5285
	SKIPPING VROUNDSD inum 4690 -- already fine
	SKIPPING VROUNDSD inum 4691 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VBROADCASTSS inum=4410  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=0 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=4411  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=5437  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VBROADCASTSS inum=5438  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VINSERTF128 inum=4414  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VINSERTF128 inum=4415  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 1 1 MOD=3    r r r n    n n UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VBROADCASTSS inum 4410 -- already fine
	SKIPPING VBROADCASTSS inum 4411 -- already fine
	REARRANGE needs to juggle: VBROADCASTSS inum 5437
	REARRANGE one pattern worked for VBROADCASTSS inum 5437
	REARRANGE needs to juggle: VBROADCASTSS inum 5438
	REARRANGE one pattern worked for VBROADCASTSS inum 5438
	SKIPPING VINSERTF128 inum 4414 -- already fine
	SKIPPING VINSERTF128 inum 4415 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VEXTRACTF128 inum=4364  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VEXTRACTF128 inum=4365  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

VBROADCASTSD inum=4412  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSD inum=5439  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VEXTRACTF128 inum 4364 -- already fine
	SKIPPING VEXTRACTF128 inum 4365 -- already fine
	SKIPPING VBROADCASTSD inum 4412 -- already fine
	REARRANGE needs to juggle: VBROADCASTSD inum 5439
	REARRANGE one pattern worked for VBROADCASTSD inum 5439
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPABSB inum=4532  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=4533  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=5176  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5177  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSB inum 4532 -- already fine
	SKIPPING VPABSB inum 4533 -- already fine
	REARRANGE needs to juggle: VPABSB inum 5176
	REARRANGE one pattern worked for VPABSB inum 5176
	REARRANGE needs to juggle: VPABSB inum 5177
	REARRANGE one pattern worked for VPABSB inum 5177
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSB inum=4532  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=4533  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=5176  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5177  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSB inum 4532 -- already fine
	SKIPPING VPABSB inum 4533 -- already fine
	REARRANGE needs to juggle: VPABSB inum 5176
	REARRANGE one pattern worked for VPABSB inum 5176
	REARRANGE needs to juggle: VPABSB inum 5177
	REARRANGE one pattern worked for VPABSB inum 5177
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSW inum=4534  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=4535  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=5178  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5179  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=4964  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=4965  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=4966  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=4967  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSW inum 4534 -- already fine
	SKIPPING VPABSW inum 4535 -- already fine
	REARRANGE needs to juggle: VPABSW inum 5178
	REARRANGE one pattern worked for VPABSW inum 5178
	REARRANGE needs to juggle: VPABSW inum 5179
	REARRANGE one pattern worked for VPABSW inum 5179
	REARRANGE needs to juggle: VCVTPS2PH inum 4964
	REARRANGE one pattern worked for VCVTPS2PH inum 4964
	REARRANGE needs to juggle: VCVTPS2PH inum 4965
	REARRANGE one pattern worked for VCVTPS2PH inum 4965
	REARRANGE needs to juggle: VCVTPS2PH inum 4966
	REARRANGE one pattern worked for VCVTPS2PH inum 4966
	REARRANGE needs to juggle: VCVTPS2PH inum 4967
	REARRANGE one pattern worked for VCVTPS2PH inum 4967
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSW inum=4534  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=4535  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=5178  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5179  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=4964  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=4965  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=4966  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=4967  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSW inum 4534 -- already fine
	SKIPPING VPABSW inum 4535 -- already fine
	REARRANGE needs to juggle: VPABSW inum 5178
	REARRANGE one pattern worked for VPABSW inum 5178
	REARRANGE needs to juggle: VPABSW inum 5179
	REARRANGE one pattern worked for VPABSW inum 5179
	REARRANGE needs to juggle: VCVTPS2PH inum 4964
	REARRANGE one pattern worked for VCVTPS2PH inum 4964
	REARRANGE needs to juggle: VCVTPS2PH inum 4965
	REARRANGE one pattern worked for VCVTPS2PH inum 4965
	REARRANGE needs to juggle: VCVTPS2PH inum 4966
	REARRANGE one pattern worked for VCVTPS2PH inum 4966
	REARRANGE needs to juggle: VCVTPS2PH inum 4967
	REARRANGE one pattern worked for VCVTPS2PH inum 4967
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSD inum=4536  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=4537  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=5180  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5181  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSD inum 4536 -- already fine
	SKIPPING VPABSD inum 4537 -- already fine
	REARRANGE needs to juggle: VPABSD inum 5180
	REARRANGE one pattern worked for VPABSD inum 5180
	REARRANGE needs to juggle: VPABSD inum 5181
	REARRANGE one pattern worked for VPABSD inum 5181
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSD inum=4536  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=4537  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=5180  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5181  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSD inum 4536 -- already fine
	SKIPPING VPABSD inum 4537 -- already fine
	REARRANGE needs to juggle: VPABSD inum 5180
	REARRANGE one pattern worked for VPABSD inum 5180
	REARRANGE needs to juggle: VPABSD inum 5181
	REARRANGE one pattern worked for VPABSD inum 5181
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPMOVZXBW inum=4873  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=4874  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBW inum=5383  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=5384  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRW inum=6603  iform_input=KSHIFTRW_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRB inum=8462  iform_input=KSHIFTRB_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMOVZXBW inum 4873 -- already fine
	SKIPPING VPMOVZXBW inum 4874 -- already fine
	SKIPPING VPMOVZXBW inum 5383 -- already fine
	SKIPPING VPMOVZXBW inum 5384 -- already fine
	REARRANGE needs to juggle: KSHIFTRW inum 6603
	REARRANGE one pattern worked for KSHIFTRW inum 6603
	REARRANGE needs to juggle: KSHIFTRB inum 8462
	REARRANGE one pattern worked for KSHIFTRB inum 8462
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMOVZXBD inum=4875  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=4876  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBD inum=5385  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5386  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRD inum=8463  iform_input=KSHIFTRD_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRQ inum=8464  iform_input=KSHIFTRQ_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMOVZXBD inum 4875 -- already fine
	SKIPPING VPMOVZXBD inum 4876 -- already fine
	SKIPPING VPMOVZXBD inum 5385 -- already fine
	SKIPPING VPMOVZXBD inum 5386 -- already fine
	REARRANGE needs to juggle: KSHIFTRD inum 8463
	REARRANGE one pattern worked for KSHIFTRD inum 8463
	REARRANGE needs to juggle: KSHIFTRQ inum 8464
	REARRANGE one pattern worked for KSHIFTRQ inum 8464
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VDPPD inum=4366  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VDPPD inum=4367  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VPHMINPOSUW inum=4538  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPHMINPOSUW inum=4539  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

KANDW inum=6593  iform_input=KANDW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDB inum=8427  iform_input=KANDB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDD inum=8428  iform_input=KANDD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KANDQ inum=8432  iform_input=KANDQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VDPPD inum 4366 -- already fine
	SKIPPING VDPPD inum 4367 -- already fine
	REARRANGE needs to juggle: VPHMINPOSUW inum 4538
	REARRANGE one pattern worked for VPHMINPOSUW inum 4538
	REARRANGE needs to juggle: VPHMINPOSUW inum 4539
	REARRANGE one pattern worked for VPHMINPOSUW inum 4539
	REARRANGE needs to juggle: KANDW inum 6593
	REARRANGE one pattern worked for KANDW inum 6593
	REARRANGE needs to juggle: KANDB inum 8427
	REARRANGE one pattern worked for KANDB inum 8427
	REARRANGE needs to juggle: KANDD inum 8428
	REARRANGE one pattern worked for KANDD inum 8428
	REARRANGE needs to juggle: KANDQ inum 8432
	REARRANGE one pattern worked for KANDQ inum 8432
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMPSADBW inum=4794  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=4795  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VMPSADBW inum=5342  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5343  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

KANDNW inum=6592  iform_input=KANDNW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDNB inum=8429  iform_input=KANDNB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDND inum=8430  iform_input=KANDND_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KANDNQ inum=8431  iform_input=KANDNQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMPSADBW inum 4794 -- already fine
	SKIPPING VMPSADBW inum 4795 -- already fine
	SKIPPING VMPSADBW inum 5342 -- already fine
	SKIPPING VMPSADBW inum 5343 -- already fine
	REARRANGE needs to juggle: KANDNW inum 6592
	REARRANGE one pattern worked for KANDNW inum 6592
	REARRANGE needs to juggle: KANDNB inum 8429
	REARRANGE one pattern worked for KANDNB inum 8429
	REARRANGE needs to juggle: KANDND inum 8430
	REARRANGE one pattern worked for KANDND inum 8430
	REARRANGE needs to juggle: KANDNQ inum 8431
	REARRANGE one pattern worked for KANDNQ inum 8431
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPSRLVD inum=5449  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5450  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVD inum=5451  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5452  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=5453  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5454  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=5455  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5456  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KORW inum=6601  iform_input=KORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KORB inum=8453  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KORD inum=8454  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KORQ inum=8455  iform_input=KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSRLVD inum 5449 -- already fine
	SKIPPING VPSRLVD inum 5450 -- already fine
	SKIPPING VPSRLVD inum 5451 -- already fine
	SKIPPING VPSRLVD inum 5452 -- already fine
	SKIPPING VPSRLVQ inum 5453 -- already fine
	SKIPPING VPSRLVQ inum 5454 -- already fine
	SKIPPING VPSRLVQ inum 5455 -- already fine
	SKIPPING VPSRLVQ inum 5456 -- already fine
	REARRANGE needs to juggle: KORW inum 6601
	REARRANGE one pattern worked for KORW inum 6601
	REARRANGE needs to juggle: KORB inum 8453
	REARRANGE one pattern worked for KORB inum 8453
	REARRANGE needs to juggle: KORD inum 8454
	REARRANGE one pattern worked for KORD inum 8454
	REARRANGE needs to juggle: KORQ inum 8455
	REARRANGE one pattern worked for KORQ inum 8455
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSRLVD inum=5451  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5452  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=5455  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5456  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KORW inum=6601  iform_input=KORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KORB inum=8453  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KORD inum=8454  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KORQ inum=8455  iform_input=KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPSRLVD inum 5451 -- already fine
	SKIPPING VPSRLVD inum 5452 -- already fine
	SKIPPING VPSRLVQ inum 5455 -- already fine
	SKIPPING VPSRLVQ inum 5456 -- already fine
	REARRANGE needs to juggle: KORW inum 6601
	REARRANGE one pattern worked for KORW inum 6601
	REARRANGE needs to juggle: KORB inum 8453
	REARRANGE one pattern worked for KORB inum 8453
	REARRANGE needs to juggle: KORD inum 8454
	REARRANGE one pattern worked for KORD inum 8454
	REARRANGE needs to juggle: KORQ inum 8455
	REARRANGE one pattern worked for KORQ inum 8455
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPERM2I128 inum=5407  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=5408  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

VPSRAVD inum=5457  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPSRAVD inum=5458  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPSRAVD inum=5459  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

VPSRAVD inum=5460  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORW inum=6605  iform_input=KXNORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORB inum=8471  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORD inum=8472  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXNORQ inum=8473  iform_input=KXNORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPERM2I128 inum 5407 -- already fine
	SKIPPING VPERM2I128 inum 5408 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 5457
	REARRANGE one pattern worked for VPSRAVD inum 5457
	REARRANGE needs to juggle: VPSRAVD inum 5458
	REARRANGE one pattern worked for VPSRAVD inum 5458
	REARRANGE needs to juggle: VPSRAVD inum 5459
	REARRANGE one pattern worked for VPSRAVD inum 5459
	REARRANGE needs to juggle: VPSRAVD inum 5460
	REARRANGE one pattern worked for VPSRAVD inum 5460
	REARRANGE needs to juggle: KXNORW inum 6605
	REARRANGE one pattern worked for KXNORW inum 6605
	REARRANGE needs to juggle: KXNORB inum 8471
	REARRANGE one pattern worked for KXNORB inum 8471
	REARRANGE needs to juggle: KXNORD inum 8472
	REARRANGE one pattern worked for KXNORD inum 8472
	REARRANGE needs to juggle: KXNORQ inum 8473
	REARRANGE one pattern worked for KXNORQ inum 8473
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPERM2I128 inum=5407  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=5408  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

VPSRAVD inum=5459  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    m m MOD!=3 r    r r n n    n MODRM() REXW=0

VPSRAVD inum=5460  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    1 1 MOD=3 r    r r n n    n REXW=0

KXNORW inum=6605  iform_input=KXNORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXNORB inum=8471  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXNORD inum=8472  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KXNORQ inum=8473  iform_input=KXNORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPERM2I128 inum 5407 -- already fine
	SKIPPING VPERM2I128 inum 5408 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 5459
	REARRANGE one pattern worked for VPSRAVD inum 5459
	REARRANGE needs to juggle: VPSRAVD inum 5460
	REARRANGE one pattern worked for VPSRAVD inum 5460
	SKIPPING KXNORW inum 6605 -- already fine
	SKIPPING KXNORB inum 8471 -- already fine
	SKIPPING KXNORD inum 8472 -- already fine
	SKIPPING KXNORQ inum 8473 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSLLVD inum=5441  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5442  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVD inum=5443  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5444  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5445  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5446  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5447  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5448  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KXORW inum=6606  iform_input=KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORB inum=8474  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORD inum=8475  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXORQ inum=8476  iform_input=KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLVD inum 5441 -- already fine
	SKIPPING VPSLLVD inum 5442 -- already fine
	SKIPPING VPSLLVD inum 5443 -- already fine
	SKIPPING VPSLLVD inum 5444 -- already fine
	SKIPPING VPSLLVQ inum 5445 -- already fine
	SKIPPING VPSLLVQ inum 5446 -- already fine
	SKIPPING VPSLLVQ inum 5447 -- already fine
	SKIPPING VPSLLVQ inum 5448 -- already fine
	REARRANGE needs to juggle: KXORW inum 6606
	REARRANGE one pattern worked for KXORW inum 6606
	REARRANGE needs to juggle: KXORB inum 8474
	REARRANGE one pattern worked for KXORB inum 8474
	REARRANGE needs to juggle: KXORD inum 8475
	REARRANGE one pattern worked for KXORD inum 8475
	REARRANGE needs to juggle: KXORQ inum 8476
	REARRANGE one pattern worked for KXORQ inum 8476
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLVD inum=5443  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5444  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5447  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5448  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KXORW inum=6606  iform_input=KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXORB inum=8474  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXORD inum=8475  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KXORQ inum=8476  iform_input=KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPSLLVD inum 5443 -- already fine
	SKIPPING VPSLLVD inum 5444 -- already fine
	SKIPPING VPSLLVQ inum 5447 -- already fine
	SKIPPING VPSLLVQ inum 5448 -- already fine
	REARRANGE needs to juggle: KXORW inum 6606
	REARRANGE one pattern worked for KXORW inum 6606
	REARRANGE needs to juggle: KXORB inum 8474
	REARRANGE one pattern worked for KXORB inum 8474
	REARRANGE needs to juggle: KXORD inum 8475
	REARRANGE one pattern worked for KXORD inum 8475
	REARRANGE needs to juggle: KXORQ inum 8476
	REARRANGE one pattern worked for KXORQ inum 8476
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VMOVMSKPD inum=4856  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVMSKPD inum=4857  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVMSKPS inum=4858  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=0 VEX_PREFIX=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVMSKPS inum=4859  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=1 VEX_PREFIX=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPDPBUSD inum=8740  iform_input=VPDPBUSD_XMMi32_XMMu32_XMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPDPBUSD inum=8741  iform_input=VPDPBUSD_XMMi32_XMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPDPBUSD inum=8742  iform_input=VPDPBUSD_YMMi32_YMMu32_YMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPDPBUSD inum=8743  iform_input=VPDPBUSD_YMMi32_YMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVMSKPD inum 4856 -- already fine
	SKIPPING VMOVMSKPD inum 4857 -- already fine
	SKIPPING VMOVMSKPS inum 4858 -- already fine
	SKIPPING VMOVMSKPS inum 4859 -- already fine
	REARRANGE needs to juggle: VPDPBUSD inum 8740
	REARRANGE one pattern worked for VPDPBUSD inum 8740
	REARRANGE needs to juggle: VPDPBUSD inum 8741
	REARRANGE one pattern worked for VPDPBUSD inum 8741
	REARRANGE needs to juggle: VPDPBUSD inum 8742
	REARRANGE one pattern worked for VPDPBUSD inum 8742
	REARRANGE needs to juggle: VPDPBUSD inum 8743
	REARRANGE one pattern worked for VPDPBUSD inum 8743
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VSQRTPD inum=4714  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=4715  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPD inum=4716  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=4717  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPS inum=4718  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=4719  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTPS inum=4720  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=4721  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTSD inum=4722  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSD inum=4723  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VSQRTSS inum=4724  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSS inum=4725  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPDPBUSDS inum=8744  iform_input=VPDPBUSDS_XMMi32_XMMu32_XMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPDPBUSDS inum=8745  iform_input=VPDPBUSDS_XMMi32_XMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPDPBUSDS inum=8746  iform_input=VPDPBUSDS_YMMi32_YMMu32_YMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPDPBUSDS inum=8747  iform_input=VPDPBUSDS_YMMi32_YMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VSQRTPD inum 4714 -- already fine
	SKIPPING VSQRTPD inum 4715 -- already fine
	SKIPPING VSQRTPD inum 4716 -- already fine
	SKIPPING VSQRTPD inum 4717 -- already fine
	SKIPPING VSQRTPS inum 4718 -- already fine
	SKIPPING VSQRTPS inum 4719 -- already fine
	SKIPPING VSQRTPS inum 4720 -- already fine
	SKIPPING VSQRTPS inum 4721 -- already fine
	REARRANGE needs to juggle: VSQRTSD inum 4722
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VSQRTPD inum 4714
	REARRANGE one pattern worked for VSQRTPD inum 4714
	REARRANGE needs to juggle: VSQRTPD inum 4715
	REARRANGE one pattern worked for VSQRTPD inum 4715
	REARRANGE needs to juggle: VSQRTPD inum 4716
	REARRANGE one pattern worked for VSQRTPD inum 4716
	REARRANGE needs to juggle: VSQRTPD inum 4717
	REARRANGE one pattern worked for VSQRTPD inum 4717
	REARRANGE needs to juggle: VSQRTPS inum 4718
	REARRANGE one pattern worked for VSQRTPS inum 4718
	REARRANGE needs to juggle: VSQRTPS inum 4719
	REARRANGE one pattern worked for VSQRTPS inum 4719
	REARRANGE needs to juggle: VSQRTPS inum 4720
	REARRANGE one pattern worked for VSQRTPS inum 4720
	REARRANGE needs to juggle: VSQRTPS inum 4721
	REARRANGE one pattern worked for VSQRTPS inum 4721
	SKIPPING VSQRTSD inum 4722 -- already fine
	SKIPPING VSQRTSD inum 4723 -- already fine
	SKIPPING VSQRTSS inum 4724 -- already fine
	SKIPPING VSQRTSS inum 4725 -- already fine
	SKIPPING VPDPBUSDS inum 8744 -- already fine
	SKIPPING VPDPBUSDS inum 8745 -- already fine
	SKIPPING VPDPBUSDS inum 8746 -- already fine
	SKIPPING VPDPBUSDS inum 8747 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VSQRTPD inum=4714  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=4715  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPD inum=4716  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=4717  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPDPBUSDS inum=8744  iform_input=VPDPBUSDS_XMMi32_XMMu32_XMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPDPBUSDS inum=8745  iform_input=VPDPBUSDS_XMMi32_XMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPDPBUSDS inum=8746  iform_input=VPDPBUSDS_YMMi32_YMMu32_YMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPDPBUSDS inum=8747  iform_input=VPDPBUSDS_YMMi32_YMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VSQRTPD inum 4714 -- already fine
	SKIPPING VSQRTPD inum 4715 -- already fine
	SKIPPING VSQRTPD inum 4716 -- already fine
	SKIPPING VSQRTPD inum 4717 -- already fine
	REARRANGE needs to juggle: VPDPBUSDS inum 8744
	REARRANGE one pattern worked for VPDPBUSDS inum 8744
	REARRANGE needs to juggle: VPDPBUSDS inum 8745
	REARRANGE one pattern worked for VPDPBUSDS inum 8745
	REARRANGE needs to juggle: VPDPBUSDS inum 8746
	REARRANGE one pattern worked for VPDPBUSDS inum 8746
	REARRANGE needs to juggle: VPDPBUSDS inum 8747
	REARRANGE one pattern worked for VPDPBUSDS inum 8747
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VORPD inum=4758  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=4759  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPD inum=4760  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=4761  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPS inum=4762  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=4763  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VORPS inum=4764  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=4765  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VORPD inum 4758 -- already fine
	SKIPPING VORPD inum 4759 -- already fine
	SKIPPING VORPD inum 4760 -- already fine
	SKIPPING VORPD inum 4761 -- already fine
	REARRANGE needs to juggle: VORPS inum 4762
	REARRANGE one pattern worked for VORPS inum 4762
	REARRANGE needs to juggle: VORPS inum 4763
	REARRANGE one pattern worked for VORPS inum 4763
	REARRANGE needs to juggle: VORPS inum 4764
	REARRANGE one pattern worked for VORPS inum 4764
	REARRANGE needs to juggle: VORPS inum 4765
	REARRANGE one pattern worked for VORPS inum 4765
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VADDPD inum=4220  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=4221  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPD inum=4222  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=4223  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPS inum=4224  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=4225  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPS inum=4226  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=4227  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDSD inum=4228  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSD inum=4229  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VADDSS inum=4230  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSS inum=4231  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPBROADCASTD inum=5429  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=5430  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTD inum=5431  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=5432  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VADDPD inum 4220 -- already fine
	SKIPPING VADDPD inum 4221 -- already fine
	SKIPPING VADDPD inum 4222 -- already fine
	SKIPPING VADDPD inum 4223 -- already fine
	SKIPPING VADDPS inum 4224 -- already fine
	SKIPPING VADDPS inum 4225 -- already fine
	SKIPPING VADDPS inum 4226 -- already fine
	SKIPPING VADDPS inum 4227 -- already fine
	SKIPPING VADDSD inum 4228 -- already fine
	SKIPPING VADDSD inum 4229 -- already fine
	SKIPPING VADDSS inum 4230 -- already fine
	SKIPPING VADDSS inum 4231 -- already fine
	REARRANGE needs to juggle: VPBROADCASTD inum 5429
	REARRANGE one pattern worked for VPBROADCASTD inum 5429
	REARRANGE needs to juggle: VPBROADCASTD inum 5430
	REARRANGE one pattern worked for VPBROADCASTD inum 5430
	REARRANGE needs to juggle: VPBROADCASTD inum 5431
	REARRANGE one pattern worked for VPBROADCASTD inum 5431
	REARRANGE needs to juggle: VPBROADCASTD inum 5432
	REARRANGE one pattern worked for VPBROADCASTD inum 5432
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMULPD inum=4746  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=4747  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPD inum=4748  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=4749  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPS inum=4750  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=4751  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPS inum=4752  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=4753  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VMULSD inum=4754  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSD inum=4755  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VMULSS inum=4756  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSS inum=4757  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPBROADCASTQ inum=5433  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=5434  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTQ inum=5435  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=5436  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMULPD inum 4746 -- already fine
	SKIPPING VMULPD inum 4747 -- already fine
	SKIPPING VMULPD inum 4748 -- already fine
	SKIPPING VMULPD inum 4749 -- already fine
	SKIPPING VMULPS inum 4750 -- already fine
	SKIPPING VMULPS inum 4751 -- already fine
	SKIPPING VMULPS inum 4752 -- already fine
	SKIPPING VMULPS inum 4753 -- already fine
	REARRANGE needs to juggle: VMULSD inum 4754
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VMULPD inum 4746
	REARRANGE one pattern worked for VMULPD inum 4746
	REARRANGE needs to juggle: VMULPD inum 4747
	REARRANGE one pattern worked for VMULPD inum 4747
	REARRANGE needs to juggle: VMULPD inum 4748
	REARRANGE one pattern worked for VMULPD inum 4748
	REARRANGE needs to juggle: VMULPD inum 4749
	REARRANGE one pattern worked for VMULPD inum 4749
	REARRANGE needs to juggle: VMULPS inum 4750
	REARRANGE one pattern worked for VMULPS inum 4750
	REARRANGE needs to juggle: VMULPS inum 4751
	REARRANGE one pattern worked for VMULPS inum 4751
	REARRANGE needs to juggle: VMULPS inum 4752
	REARRANGE one pattern worked for VMULPS inum 4752
	REARRANGE needs to juggle: VMULPS inum 4753
	REARRANGE one pattern worked for VMULPS inum 4753
	SKIPPING VMULSD inum 4754 -- already fine
	SKIPPING VMULSD inum 4755 -- already fine
	SKIPPING VMULSS inum 4756 -- already fine
	SKIPPING VMULSS inum 4757 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 5433
	REARRANGE one pattern worked for VPBROADCASTQ inum 5433
	REARRANGE needs to juggle: VPBROADCASTQ inum 5434
	REARRANGE one pattern worked for VPBROADCASTQ inum 5434
	REARRANGE needs to juggle: VPBROADCASTQ inum 5435
	REARRANGE one pattern worked for VPBROADCASTQ inum 5435
	REARRANGE needs to juggle: VPBROADCASTQ inum 5436
	REARRANGE one pattern worked for VPBROADCASTQ inum 5436
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VCVTPD2PS inum=4296  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=4297  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPD2PS inum=4298  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=4299  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=4308  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=4309  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=4310  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=4311  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTSD2SS inum=4336  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSD2SS inum=4337  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VCVTSS2SD inum=4350  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSS2SD inum=4351  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VBROADCASTI128 inum=5440  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VCVTPD2PS inum 4296 -- already fine
	SKIPPING VCVTPD2PS inum 4297 -- already fine
	SKIPPING VCVTPD2PS inum 4298 -- already fine
	SKIPPING VCVTPD2PS inum 4299 -- already fine
	SKIPPING VCVTPS2PD inum 4308 -- already fine
	SKIPPING VCVTPS2PD inum 4309 -- already fine
	SKIPPING VCVTPS2PD inum 4310 -- already fine
	SKIPPING VCVTPS2PD inum 4311 -- already fine
	SKIPPING VCVTSD2SS inum 4336 -- already fine
	SKIPPING VCVTSD2SS inum 4337 -- already fine
	SKIPPING VCVTSS2SD inum 4350 -- already fine
	SKIPPING VCVTSS2SD inum 4351 -- already fine
	REARRANGE needs to juggle: VBROADCASTI128 inum 5440
	REARRANGE one pattern worked for VBROADCASTI128 inum 5440
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VSUBPD inum=4734  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=4735  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VSUBPD inum=4736  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=4737  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

VSUBPS inum=4738  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=4739  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VSUBPS inum=4740  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=4741  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VSUBSD inum=4742  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSD inum=4743  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VSUBSS inum=4744  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSS inum=4745  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

TDPBF16PS inum=8763  iform_input=TDPBF16PS_TMMf32_TMMu32_TMMu32  isa_set=AMX_BF16 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VSUBPD inum 4734 -- already fine
	SKIPPING VSUBPD inum 4735 -- already fine
	SKIPPING VSUBPD inum 4736 -- already fine
	SKIPPING VSUBPD inum 4737 -- already fine
	REARRANGE needs to juggle: VSUBPS inum 4738
	REARRANGE one pattern worked for VSUBPS inum 4738
	REARRANGE needs to juggle: VSUBPS inum 4739
	REARRANGE one pattern worked for VSUBPS inum 4739
	REARRANGE needs to juggle: VSUBPS inum 4740
	REARRANGE one pattern worked for VSUBPS inum 4740
	REARRANGE needs to juggle: VSUBPS inum 4741
	REARRANGE one pattern worked for VSUBPS inum 4741
	SKIPPING VSUBSD inum 4742 -- already fine
	SKIPPING VSUBSD inum 4743 -- already fine
	SKIPPING VSUBSS inum 4744 -- already fine
	SKIPPING VSUBSS inum 4745 -- already fine
	SKIPPING TDPBF16PS inum 8763 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPGATHERDQ inum=5168  iform_input=VPGATHERDQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDQ inum=5169  iform_input=VPGATHERDQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDD inum=5170  iform_input=VPGATHERDD_YMMu32_MEMd_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERDD inum=5171  iform_input=VPGATHERDD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=6594  iform_input=KMOVW_MASKmskw_MASKu16_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVW inum=6595  iform_input=KMOVW_MASKmskw_MEMu16_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVB inum=8433  iform_input=KMOVB_MASKmskw_MASKu8_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=8434  iform_input=KMOVB_MASKmskw_MEMu8_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8438  iform_input=KMOVD_MASKmskw_MASKu32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8439  iform_input=KMOVD_MASKmskw_MEMu32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVQ inum=8445  iform_input=KMOVQ_MASKmskw_MASKu64_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8446  iform_input=KMOVQ_MASKmskw_MEMu64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPGATHERDQ inum 5168 -- already fine
	SKIPPING VPGATHERDQ inum 5169 -- already fine
	SKIPPING VPGATHERDD inum 5170 -- already fine
	SKIPPING VPGATHERDD inum 5171 -- already fine
	REARRANGE needs to juggle: KMOVW inum 6594
	REARRANGE one pattern worked for KMOVW inum 6594
	REARRANGE needs to juggle: KMOVW inum 6595
	REARRANGE one pattern worked for KMOVW inum 6595
	REARRANGE needs to juggle: KMOVB inum 8433
	REARRANGE one pattern worked for KMOVB inum 8433
	REARRANGE needs to juggle: KMOVB inum 8434
	REARRANGE one pattern worked for KMOVB inum 8434
	REARRANGE needs to juggle: KMOVD inum 8438
	REARRANGE one pattern worked for KMOVD inum 8438
	REARRANGE needs to juggle: KMOVD inum 8439
	REARRANGE one pattern worked for KMOVD inum 8439
	REARRANGE needs to juggle: KMOVQ inum 8445
	REARRANGE one pattern worked for KMOVQ inum 8445
	REARRANGE needs to juggle: KMOVQ inum 8446
	REARRANGE one pattern worked for KMOVQ inum 8446
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPGATHERQQ inum=5172  iform_input=VPGATHERQQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQQ inum=5173  iform_input=VPGATHERQQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERQD inum=5174  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQD inum=5175  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=6596  iform_input=KMOVW_MEMu16_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVB inum=8435  iform_input=KMOVB_MEMu8_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8440  iform_input=KMOVD_MEMu32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVQ inum=8447  iform_input=KMOVQ_MEMu64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPGATHERQQ inum 5172 -- already fine
	SKIPPING VPGATHERQQ inum 5173 -- already fine
	SKIPPING VPGATHERQD inum 5174 -- already fine
	SKIPPING VPGATHERQD inum 5175 -- already fine
	REARRANGE needs to juggle: KMOVW inum 6596
	REARRANGE one pattern worked for KMOVW inum 6596
	REARRANGE needs to juggle: KMOVB inum 8435
	REARRANGE one pattern worked for KMOVB inum 8435
	REARRANGE needs to juggle: KMOVD inum 8440
	REARRANGE one pattern worked for KMOVD inum 8440
	REARRANGE needs to juggle: KMOVQ inum 8447
	REARRANGE one pattern worked for KMOVQ inum 8447
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VGATHERDPD inum=5160  iform_input=VGATHERDPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPD inum=5161  iform_input=VGATHERDPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPS inum=5162  iform_input=VGATHERDPS_YMMf32_MEMf32_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERDPS inum=5163  iform_input=VGATHERDPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=6597  iform_input=KMOVW_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=8436  iform_input=KMOVB_MASKmskw_GPR32u32_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8441  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8442  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8448  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VGATHERDPD inum 5160 -- already fine
	SKIPPING VGATHERDPD inum 5161 -- already fine
	SKIPPING VGATHERDPS inum 5162 -- already fine
	SKIPPING VGATHERDPS inum 5163 -- already fine
	REARRANGE needs to juggle: KMOVW inum 6597
	REARRANGE one pattern worked for KMOVW inum 6597
	REARRANGE needs to juggle: KMOVB inum 8436
	REARRANGE one pattern worked for KMOVB inum 8436
	REARRANGE needs to juggle: KMOVD inum 8441
	REARRANGE one pattern worked for KMOVD inum 8441
	REARRANGE needs to juggle: KMOVD inum 8442
	REARRANGE one pattern worked for KMOVD inum 8442
	REARRANGE needs to juggle: KMOVQ inum 8448
	REARRANGE one pattern worked for KMOVQ inum 8448
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=8441  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8442  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8448  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 8441 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8442
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 8441
	REARRANGE one pattern worked for KMOVD inum 8441
	SKIPPING KMOVD inum 8442 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 8448
	REARRANGE one pattern worked for KMOVQ inum 8448
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
VGATHERQPD inum=5164  iform_input=VGATHERQPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPD inum=5165  iform_input=VGATHERQPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERQPS inum=5166  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPS inum=5167  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=6598  iform_input=KMOVW_GPR32u32_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=8437  iform_input=KMOVB_GPR32u32_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8443  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8444  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8449  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VGATHERQPD inum 5164 -- already fine
	SKIPPING VGATHERQPD inum 5165 -- already fine
	SKIPPING VGATHERQPS inum 5166 -- already fine
	SKIPPING VGATHERQPS inum 5167 -- already fine
	REARRANGE needs to juggle: KMOVW inum 6598
	REARRANGE one pattern worked for KMOVW inum 6598
	REARRANGE needs to juggle: KMOVB inum 8437
	REARRANGE one pattern worked for KMOVB inum 8437
	REARRANGE needs to juggle: KMOVD inum 8443
	REARRANGE one pattern worked for KMOVD inum 8443
	REARRANGE needs to juggle: KMOVD inum 8444
	REARRANGE one pattern worked for KMOVD inum 8444
	REARRANGE needs to juggle: KMOVQ inum 8449
	REARRANGE one pattern worked for KMOVQ inum 8449
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=8443  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8444  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8449  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 8443 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8444
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 8443
	REARRANGE one pattern worked for KMOVD inum 8443
	SKIPPING KMOVD inum 8444 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 8449
	REARRANGE one pattern worked for KMOVQ inum 8449
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
VFMADD132PD inum=4968  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=4969  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PD inum=4970  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=4971  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=4972  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=4973  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=4974  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=4975  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

KORTESTW inum=6600  iform_input=KORTESTW_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTB inum=8456  iform_input=KORTESTB_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTD inum=8457  iform_input=KORTESTD_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTQ inum=8458  iform_input=KORTESTQ_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VFMADD132PD inum 4968 -- already fine
	SKIPPING VFMADD132PD inum 4969 -- already fine
	SKIPPING VFMADD132PD inum 4970 -- already fine
	SKIPPING VFMADD132PD inum 4971 -- already fine
	SKIPPING VFMADD132PS inum 4972 -- already fine
	SKIPPING VFMADD132PS inum 4973 -- already fine
	SKIPPING VFMADD132PS inum 4974 -- already fine
	SKIPPING VFMADD132PS inum 4975 -- already fine
	REARRANGE needs to juggle: KORTESTW inum 6600
	REARRANGE one pattern worked for KORTESTW inum 6600
	REARRANGE needs to juggle: KORTESTB inum 8456
	REARRANGE one pattern worked for KORTESTB inum 8456
	REARRANGE needs to juggle: KORTESTD inum 8457
	REARRANGE one pattern worked for KORTESTD inum 8457
	REARRANGE needs to juggle: KORTESTQ inum 8458
	REARRANGE one pattern worked for KORTESTQ inum 8458
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPADDUSB inum=4582  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=4583  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSB inum=5218  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=5219  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESENC inum=4948  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENC inum=4949  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENC inum=8702  iform_input=VAESENC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENC inum=8703  iform_input=VAESENC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPADDUSB inum 4582 -- already fine
	SKIPPING VPADDUSB inum 4583 -- already fine
	SKIPPING VPADDUSB inum 5218 -- already fine
	SKIPPING VPADDUSB inum 5219 -- already fine
	REARRANGE needs to juggle: VAESENC inum 4948
	REARRANGE one pattern worked for VAESENC inum 4948
	REARRANGE needs to juggle: VAESENC inum 4949
	REARRANGE one pattern worked for VAESENC inum 4949
	REARRANGE needs to juggle: VAESENC inum 8702
	REARRANGE one pattern worked for VAESENC inum 8702
	REARRANGE needs to juggle: VAESENC inum 8703
	REARRANGE one pattern worked for VAESENC inum 8703
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPADDUSW inum=4584  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=4585  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSW inum=5220  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=5221  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESENCLAST inum=4950  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENCLAST inum=4951  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENCLAST inum=8704  iform_input=VAESENCLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENCLAST inum=8705  iform_input=VAESENCLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPADDUSW inum 4584 -- already fine
	SKIPPING VPADDUSW inum 4585 -- already fine
	SKIPPING VPADDUSW inum 5220 -- already fine
	SKIPPING VPADDUSW inum 5221 -- already fine
	REARRANGE needs to juggle: VAESENCLAST inum 4950
	REARRANGE one pattern worked for VAESENCLAST inum 4950
	REARRANGE needs to juggle: VAESENCLAST inum 4951
	REARRANGE one pattern worked for VAESENCLAST inum 4951
	REARRANGE needs to juggle: VAESENCLAST inum 8704
	REARRANGE one pattern worked for VAESENCLAST inum 8704
	REARRANGE needs to juggle: VAESENCLAST inum 8705
	REARRANGE one pattern worked for VAESENCLAST inum 8705
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMAXUB inum=4772  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=4773  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMAXUB inum=5264  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5265  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESDEC inum=4952  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDEC inum=4953  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDEC inum=8698  iform_input=VAESDEC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDEC inum=8699  iform_input=VAESDEC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMAXUB inum 4772 -- already fine
	SKIPPING VPMAXUB inum 4773 -- already fine
	SKIPPING VPMAXUB inum 5264 -- already fine
	SKIPPING VPMAXUB inum 5265 -- already fine
	REARRANGE needs to juggle: VAESDEC inum 4952
	REARRANGE one pattern worked for VAESDEC inum 4952
	REARRANGE needs to juggle: VAESDEC inum 4953
	REARRANGE one pattern worked for VAESDEC inum 4953
	REARRANGE needs to juggle: VAESDEC inum 8698
	REARRANGE one pattern worked for VAESDEC inum 8698
	REARRANGE needs to juggle: VAESDEC inum 8699
	REARRANGE one pattern worked for VAESDEC inum 8699
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPANDN inum=4528  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=4529  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPANDN inum=5348  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=5349  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESKEYGENASSIST inum=4946  isa_set=AVXAES pattern len=24
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()   

VAESKEYGENASSIST inum=4947  isa_set=AVXAES pattern len=25
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8()

VAESDECLAST inum=4954  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDECLAST inum=4955  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDECLAST inum=8700  iform_input=VAESDECLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDECLAST inum=8701  iform_input=VAESDECLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPANDN inum 4528 -- already fine
	SKIPPING VPANDN inum 4529 -- already fine
	SKIPPING VPANDN inum 5348 -- already fine
	SKIPPING VPANDN inum 5349 -- already fine
	SKIPPING VAESKEYGENASSIST inum 4946 -- already fine
	SKIPPING VAESKEYGENASSIST inum 4947 -- already fine
	REARRANGE needs to juggle: VAESDECLAST inum 4954
	REARRANGE one pattern worked for VAESDECLAST inum 4954
	REARRANGE needs to juggle: VAESDECLAST inum 4955
	REARRANGE one pattern worked for VAESDECLAST inum 4955
	REARRANGE needs to juggle: VAESDECLAST inum 8700
	REARRANGE one pattern worked for VAESDECLAST inum 8700
	REARRANGE needs to juggle: VAESDECLAST inum 8701
	REARRANGE one pattern worked for VAESDECLAST inum 8701
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VLDDQU inum=4418  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VLDDQU inum=4419  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=1 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

RORX inum=5534  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=5535  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5536  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=5537  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=5538  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5539  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VLDDQU inum 4418 -- already fine
	SKIPPING VLDDQU inum 4419 -- already fine
	REARRANGE needs to juggle: RORX inum 5534
	REARRANGE one pattern worked for RORX inum 5534
	REARRANGE needs to juggle: RORX inum 5535
	REARRANGE one pattern worked for RORX inum 5535
	REARRANGE needs to juggle: RORX inum 5536
	REARRANGE one pattern worked for RORX inum 5536
	REARRANGE needs to juggle: RORX inum 5537
	REARRANGE one pattern worked for RORX inum 5537
	REARRANGE needs to juggle: RORX inum 5538
	REARRANGE one pattern worked for RORX inum 5538
	REARRANGE needs to juggle: RORX inum 5539
	REARRANGE one pattern worked for RORX inum 5539
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 12
Others: 
RORX inum=5534  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=5535  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5536  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=5537  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=5538  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5539  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING RORX inum 5534 -- already fine
	REARRANGE needs to juggle: RORX inum 5535
	REARRANGE one pattern worked for RORX inum 5535
	SKIPPING RORX inum 5536 -- already fine
	REARRANGE needs to juggle: RORX inum 5537
	REARRANGE one pattern worked for RORX inum 5537
	REARRANGE needs to juggle: RORX inum 5538
	REARRANGE one pattern worked for RORX inum 5538
	REARRANGE needs to juggle: RORX inum 5539
	REARRANGE one pattern worked for RORX inum 5539
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSLLD inum=4556  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=4557  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLD inum=5192  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=5193  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=5474  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5475  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5476  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

ANDN inum=5477  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

ANDN inum=5478  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5479  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLD inum 4556 -- already fine
	SKIPPING VPSLLD inum 4557 -- already fine
	SKIPPING VPSLLD inum 5192 -- already fine
	SKIPPING VPSLLD inum 5193 -- already fine
	REARRANGE needs to juggle: ANDN inum 5474
	REARRANGE one pattern worked for ANDN inum 5474
	REARRANGE needs to juggle: ANDN inum 5475
	REARRANGE one pattern worked for ANDN inum 5475
	REARRANGE needs to juggle: ANDN inum 5476
	REARRANGE one pattern worked for ANDN inum 5476
	REARRANGE needs to juggle: ANDN inum 5477
	REARRANGE one pattern worked for ANDN inum 5477
	REARRANGE needs to juggle: ANDN inum 5478
	REARRANGE one pattern worked for ANDN inum 5478
	REARRANGE needs to juggle: ANDN inum 5479
	REARRANGE one pattern worked for ANDN inum 5479
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLD inum=4556  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=4557  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=5474  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5475  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5476  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=5477  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=5478  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5479  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSLLD inum 4556 -- already fine
	SKIPPING VPSLLD inum 4557 -- already fine
	REARRANGE needs to juggle: ANDN inum 5474
	REARRANGE one pattern worked for ANDN inum 5474
	REARRANGE needs to juggle: ANDN inum 5475
	REARRANGE one pattern worked for ANDN inum 5475
	REARRANGE needs to juggle: ANDN inum 5476
	REARRANGE one pattern worked for ANDN inum 5476
	REARRANGE needs to juggle: ANDN inum 5477
	REARRANGE one pattern worked for ANDN inum 5477
	REARRANGE needs to juggle: ANDN inum 5478
	REARRANGE one pattern worked for ANDN inum 5478
	REARRANGE needs to juggle: ANDN inum 5479
	REARRANGE one pattern worked for ANDN inum 5479
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
ANDN inum=5474  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5475  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5476  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=5477  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=5478  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5479  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING ANDN inum 5474 -- already fine
	REARRANGE needs to juggle: ANDN inum 5475
	REARRANGE one pattern worked for ANDN inum 5475
	SKIPPING ANDN inum 5476 -- already fine
	REARRANGE needs to juggle: ANDN inum 5477
	REARRANGE one pattern worked for ANDN inum 5477
	REARRANGE needs to juggle: ANDN inum 5478
	REARRANGE one pattern worked for ANDN inum 5478
	REARRANGE needs to juggle: ANDN inum 5479
	REARRANGE one pattern worked for ANDN inum 5479
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSLLQ inum=4558  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=4559  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLQ inum=5194  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=5195  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

BLSR inum=5480  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5481  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5482  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5483  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 0 1    n n n

BLSR inum=5484  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5485  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=5486  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5487  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5488  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5489  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5490  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5491  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5492  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5493  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5494  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5495  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 1    n n n

BLSI inum=5496  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5497  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLQ inum 4558 -- already fine
	SKIPPING VPSLLQ inum 4559 -- already fine
	SKIPPING VPSLLQ inum 5194 -- already fine
	SKIPPING VPSLLQ inum 5195 -- already fine
	REARRANGE needs to juggle: BLSR inum 5480
	REARRANGE one pattern worked for BLSR inum 5480
	REARRANGE needs to juggle: BLSR inum 5481
	REARRANGE one pattern worked for BLSR inum 5481
	REARRANGE needs to juggle: BLSR inum 5482
	REARRANGE one pattern worked for BLSR inum 5482
	REARRANGE needs to juggle: BLSR inum 5483
	REARRANGE one pattern worked for BLSR inum 5483
	REARRANGE needs to juggle: BLSR inum 5484
	REARRANGE one pattern worked for BLSR inum 5484
	REARRANGE needs to juggle: BLSR inum 5485
	REARRANGE one pattern worked for BLSR inum 5485
	REARRANGE needs to juggle: BLSMSK inum 5486
	REARRANGE one pattern worked for BLSMSK inum 5486
	REARRANGE needs to juggle: BLSMSK inum 5487
	REARRANGE one pattern worked for BLSMSK inum 5487
	REARRANGE needs to juggle: BLSMSK inum 5488
	REARRANGE one pattern worked for BLSMSK inum 5488
	REARRANGE needs to juggle: BLSMSK inum 5489
	REARRANGE one pattern worked for BLSMSK inum 5489
	REARRANGE needs to juggle: BLSMSK inum 5490
	REARRANGE one pattern worked for BLSMSK inum 5490
	REARRANGE needs to juggle: BLSMSK inum 5491
	REARRANGE one pattern worked for BLSMSK inum 5491
	REARRANGE needs to juggle: BLSI inum 5492
	REARRANGE one pattern worked for BLSI inum 5492
	REARRANGE needs to juggle: BLSI inum 5493
	REARRANGE one pattern worked for BLSI inum 5493
	REARRANGE needs to juggle: BLSI inum 5494
	REARRANGE one pattern worked for BLSI inum 5494
	REARRANGE needs to juggle: BLSI inum 5495
	REARRANGE one pattern worked for BLSI inum 5495
	REARRANGE needs to juggle: BLSI inum 5496
	REARRANGE one pattern worked for BLSI inum 5496
	REARRANGE needs to juggle: BLSI inum 5497
	REARRANGE one pattern worked for BLSI inum 5497
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLQ inum=4558  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=4559  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

BLSR inum=5480  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5481  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5482  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5483  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSR inum=5484  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5485  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=5486  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5487  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5488  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5489  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5490  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5491  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5492  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5493  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5494  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5495  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSI inum=5496  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5497  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSLLQ inum 4558 -- already fine
	SKIPPING VPSLLQ inum 4559 -- already fine
	REARRANGE needs to juggle: BLSR inum 5480
	REARRANGE one pattern worked for BLSR inum 5480
	REARRANGE needs to juggle: BLSR inum 5481
	REARRANGE one pattern worked for BLSR inum 5481
	REARRANGE needs to juggle: BLSR inum 5482
	REARRANGE one pattern worked for BLSR inum 5482
	REARRANGE needs to juggle: BLSR inum 5483
	REARRANGE one pattern worked for BLSR inum 5483
	REARRANGE needs to juggle: BLSR inum 5484
	REARRANGE one pattern worked for BLSR inum 5484
	REARRANGE needs to juggle: BLSR inum 5485
	REARRANGE one pattern worked for BLSR inum 5485
	REARRANGE needs to juggle: BLSMSK inum 5486
	REARRANGE one pattern worked for BLSMSK inum 5486
	REARRANGE needs to juggle: BLSMSK inum 5487
	REARRANGE one pattern worked for BLSMSK inum 5487
	REARRANGE needs to juggle: BLSMSK inum 5488
	REARRANGE one pattern worked for BLSMSK inum 5488
	REARRANGE needs to juggle: BLSMSK inum 5489
	REARRANGE one pattern worked for BLSMSK inum 5489
	REARRANGE needs to juggle: BLSMSK inum 5490
	REARRANGE one pattern worked for BLSMSK inum 5490
	REARRANGE needs to juggle: BLSMSK inum 5491
	REARRANGE one pattern worked for BLSMSK inum 5491
	REARRANGE needs to juggle: BLSI inum 5492
	REARRANGE one pattern worked for BLSI inum 5492
	REARRANGE needs to juggle: BLSI inum 5493
	REARRANGE one pattern worked for BLSI inum 5493
	REARRANGE needs to juggle: BLSI inum 5494
	REARRANGE one pattern worked for BLSI inum 5494
	REARRANGE needs to juggle: BLSI inum 5495
	REARRANGE one pattern worked for BLSI inum 5495
	REARRANGE needs to juggle: BLSI inum 5496
	REARRANGE one pattern worked for BLSI inum 5496
	REARRANGE needs to juggle: BLSI inum 5497
	REARRANGE one pattern worked for BLSI inum 5497
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
BLSR inum=5480  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5481  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5482  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5483  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSR inum=5484  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5485  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=5486  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5487  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5488  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5489  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5490  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5491  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5492  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5493  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5494  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5495  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSI inum=5496  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5497  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BLSR inum 5480 -- already fine
	REARRANGE needs to juggle: BLSR inum 5481
	REARRANGE one pattern worked for BLSR inum 5481
	SKIPPING BLSR inum 5482 -- already fine
	REARRANGE needs to juggle: BLSR inum 5483
	REARRANGE one pattern worked for BLSR inum 5483
	REARRANGE needs to juggle: BLSR inum 5484
	REARRANGE one pattern worked for BLSR inum 5484
	REARRANGE needs to juggle: BLSR inum 5485
	REARRANGE one pattern worked for BLSR inum 5485
	SKIPPING BLSMSK inum 5486 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 5487
	REARRANGE one pattern worked for BLSMSK inum 5487
	SKIPPING BLSMSK inum 5488 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 5489
	REARRANGE one pattern worked for BLSMSK inum 5489
	REARRANGE needs to juggle: BLSMSK inum 5490
	REARRANGE one pattern worked for BLSMSK inum 5490
	REARRANGE needs to juggle: BLSMSK inum 5491
	REARRANGE one pattern worked for BLSMSK inum 5491
	SKIPPING BLSI inum 5492 -- already fine
	REARRANGE needs to juggle: BLSI inum 5493
	REARRANGE one pattern worked for BLSI inum 5493
	SKIPPING BLSI inum 5494 -- already fine
	REARRANGE needs to juggle: BLSI inum 5495
	REARRANGE one pattern worked for BLSI inum 5495
	REARRANGE needs to juggle: BLSI inum 5496
	REARRANGE one pattern worked for BLSI inum 5496
	REARRANGE needs to juggle: BLSI inum 5497
	REARRANGE one pattern worked for BLSI inum 5497
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPMADDWD inum=4790  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=4791  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMADDWD inum=5254  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5255  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

PDEP inum=5462  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5463  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5464  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PDEP inum=5465  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PDEP inum=5466  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5467  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=5468  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5469  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5470  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PEXT inum=5471  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PEXT inum=5472  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5473  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=5498  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5499  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5500  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BZHI inum=5501  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BZHI inum=5502  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5503  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMADDWD inum 4790 -- already fine
	SKIPPING VPMADDWD inum 4791 -- already fine
	SKIPPING VPMADDWD inum 5254 -- already fine
	SKIPPING VPMADDWD inum 5255 -- already fine
	REARRANGE needs to juggle: PDEP inum 5462
	REARRANGE one pattern worked for PDEP inum 5462
	REARRANGE needs to juggle: PDEP inum 5463
	REARRANGE one pattern worked for PDEP inum 5463
	REARRANGE needs to juggle: PDEP inum 5464
	REARRANGE one pattern worked for PDEP inum 5464
	REARRANGE needs to juggle: PDEP inum 5465
	REARRANGE one pattern worked for PDEP inum 5465
	REARRANGE needs to juggle: PDEP inum 5466
	REARRANGE one pattern worked for PDEP inum 5466
	REARRANGE needs to juggle: PDEP inum 5467
	REARRANGE one pattern worked for PDEP inum 5467
	REARRANGE needs to juggle: PEXT inum 5468
	REARRANGE one pattern worked for PEXT inum 5468
	REARRANGE needs to juggle: PEXT inum 5469
	REARRANGE one pattern worked for PEXT inum 5469
	REARRANGE needs to juggle: PEXT inum 5470
	REARRANGE one pattern worked for PEXT inum 5470
	REARRANGE needs to juggle: PEXT inum 5471
	REARRANGE one pattern worked for PEXT inum 5471
	REARRANGE needs to juggle: PEXT inum 5472
	REARRANGE one pattern worked for PEXT inum 5472
	REARRANGE needs to juggle: PEXT inum 5473
	REARRANGE one pattern worked for PEXT inum 5473
	REARRANGE needs to juggle: BZHI inum 5498
	REARRANGE one pattern worked for BZHI inum 5498
	REARRANGE needs to juggle: BZHI inum 5499
	REARRANGE one pattern worked for BZHI inum 5499
	REARRANGE needs to juggle: BZHI inum 5500
	REARRANGE one pattern worked for BZHI inum 5500
	REARRANGE needs to juggle: BZHI inum 5501
	REARRANGE one pattern worked for BZHI inum 5501
	REARRANGE needs to juggle: BZHI inum 5502
	REARRANGE one pattern worked for BZHI inum 5502
	REARRANGE needs to juggle: BZHI inum 5503
	REARRANGE one pattern worked for BZHI inum 5503
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPMADDWD inum=4790  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=4791  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

PDEP inum=5462  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5463  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5464  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    MODE!=2 1 1 MOD=3    r r r n    n n

PDEP inum=5465  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PDEP inum=5466  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5467  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=5468  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5469  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5470  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    MODE!=2 1 1 MOD=3    r r r n    n n

PEXT inum=5471  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=5472  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5473  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=5498  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5499  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5500  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    r r r n    n n

BZHI inum=5501  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=5502  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5503  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPMADDWD inum 4790 -- already fine
	SKIPPING VPMADDWD inum 4791 -- already fine
	REARRANGE needs to juggle: PDEP inum 5462
	REARRANGE one pattern worked for PDEP inum 5462
	REARRANGE needs to juggle: PDEP inum 5463
	REARRANGE one pattern worked for PDEP inum 5463
	REARRANGE needs to juggle: PDEP inum 5464
	REARRANGE one pattern worked for PDEP inum 5464
	REARRANGE needs to juggle: PDEP inum 5465
	REARRANGE one pattern worked for PDEP inum 5465
	REARRANGE needs to juggle: PDEP inum 5466
	REARRANGE one pattern worked for PDEP inum 5466
	REARRANGE needs to juggle: PDEP inum 5467
	REARRANGE one pattern worked for PDEP inum 5467
	REARRANGE needs to juggle: PEXT inum 5468
	REARRANGE one pattern worked for PEXT inum 5468
	REARRANGE needs to juggle: PEXT inum 5469
	REARRANGE one pattern worked for PEXT inum 5469
	REARRANGE needs to juggle: PEXT inum 5470
	REARRANGE one pattern worked for PEXT inum 5470
	REARRANGE needs to juggle: PEXT inum 5471
	REARRANGE one pattern worked for PEXT inum 5471
	REARRANGE needs to juggle: PEXT inum 5472
	REARRANGE one pattern worked for PEXT inum 5472
	REARRANGE needs to juggle: PEXT inum 5473
	REARRANGE one pattern worked for PEXT inum 5473
	REARRANGE needs to juggle: BZHI inum 5498
	REARRANGE one pattern worked for BZHI inum 5498
	REARRANGE needs to juggle: BZHI inum 5499
	REARRANGE one pattern worked for BZHI inum 5499
	REARRANGE needs to juggle: BZHI inum 5500
	REARRANGE one pattern worked for BZHI inum 5500
	REARRANGE needs to juggle: BZHI inum 5501
	REARRANGE one pattern worked for BZHI inum 5501
	REARRANGE needs to juggle: BZHI inum 5502
	REARRANGE one pattern worked for BZHI inum 5502
	REARRANGE needs to juggle: BZHI inum 5503
	REARRANGE one pattern worked for BZHI inum 5503
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
PDEP inum=5462  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5463  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5464  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

PDEP inum=5465  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PDEP inum=5466  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5467  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PDEP inum 5462 -- already fine
	REARRANGE needs to juggle: PDEP inum 5463
	REARRANGE one pattern worked for PDEP inum 5463
	SKIPPING PDEP inum 5464 -- already fine
	REARRANGE needs to juggle: PDEP inum 5465
	REARRANGE one pattern worked for PDEP inum 5465
	REARRANGE needs to juggle: PDEP inum 5466
	REARRANGE one pattern worked for PDEP inum 5466
	REARRANGE needs to juggle: PDEP inum 5467
	REARRANGE one pattern worked for PDEP inum 5467
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 12
Others: 
PEXT inum=5468  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5469  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5470  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

PEXT inum=5471  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=5472  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5473  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PEXT inum 5468 -- already fine
	REARRANGE needs to juggle: PEXT inum 5469
	REARRANGE one pattern worked for PEXT inum 5469
	SKIPPING PEXT inum 5470 -- already fine
	REARRANGE needs to juggle: PEXT inum 5471
	REARRANGE one pattern worked for PEXT inum 5471
	REARRANGE needs to juggle: PEXT inum 5472
	REARRANGE one pattern worked for PEXT inum 5472
	REARRANGE needs to juggle: PEXT inum 5473
	REARRANGE one pattern worked for PEXT inum 5473
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 12
Others: 
BZHI inum=5498  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5499  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5500  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

BZHI inum=5501  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=5502  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5503  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BZHI inum 5498 -- already fine
	REARRANGE needs to juggle: BZHI inum 5499
	REARRANGE one pattern worked for BZHI inum 5499
	SKIPPING BZHI inum 5500 -- already fine
	REARRANGE needs to juggle: BZHI inum 5501
	REARRANGE one pattern worked for BZHI inum 5501
	REARRANGE needs to juggle: BZHI inum 5502
	REARRANGE one pattern worked for BZHI inum 5502
	REARRANGE needs to juggle: BZHI inum 5503
	REARRANGE one pattern worked for BZHI inum 5503
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSADBW inum=4632  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=4633  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSADBW inum=5296  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=5297  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

MULX inum=5528  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

MULX inum=5529  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

MULX inum=5530  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

MULX inum=5531  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=5532  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5533  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSADBW inum 4632 -- already fine
	SKIPPING VPSADBW inum 4633 -- already fine
	SKIPPING VPSADBW inum 5296 -- already fine
	SKIPPING VPSADBW inum 5297 -- already fine
	REARRANGE needs to juggle: MULX inum 5528
	REARRANGE one pattern worked for MULX inum 5528
	REARRANGE needs to juggle: MULX inum 5529
	REARRANGE one pattern worked for MULX inum 5529
	REARRANGE needs to juggle: MULX inum 5530
	REARRANGE one pattern worked for MULX inum 5530
	REARRANGE needs to juggle: MULX inum 5531
	REARRANGE one pattern worked for MULX inum 5531
	REARRANGE needs to juggle: MULX inum 5532
	REARRANGE one pattern worked for MULX inum 5532
	REARRANGE needs to juggle: MULX inum 5533
	REARRANGE one pattern worked for MULX inum 5533
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 12
Others: 
MULX inum=5528  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

MULX inum=5529  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5530  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

MULX inum=5531  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=5532  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5533  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING MULX inum 5528 -- already fine
	REARRANGE needs to juggle: MULX inum 5529
	REARRANGE one pattern worked for MULX inum 5529
	SKIPPING MULX inum 5530 -- already fine
	REARRANGE needs to juggle: MULX inum 5531
	REARRANGE one pattern worked for MULX inum 5531
	REARRANGE needs to juggle: MULX inum 5532
	REARRANGE one pattern worked for MULX inum 5532
	REARRANGE needs to juggle: MULX inum 5533
	REARRANGE one pattern worked for MULX inum 5533
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 11
Others: 
BEXTR inum=5504  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BEXTR inum=5505  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=5506  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BEXTR inum=5507  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BEXTR inum=5508  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=5509  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BEXTR inum 5504 -- already fine
	REARRANGE needs to juggle: BEXTR inum 5505
	REARRANGE one pattern worked for BEXTR inum 5505
	SKIPPING BEXTR inum 5506 -- already fine
	REARRANGE needs to juggle: BEXTR inum 5507
	REARRANGE one pattern worked for BEXTR inum 5507
	REARRANGE needs to juggle: BEXTR inum 5508
	REARRANGE one pattern worked for BEXTR inum 5508
	REARRANGE needs to juggle: BEXTR inum 5509
	REARRANGE one pattern worked for BEXTR inum 5509
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHLX inum=5510  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHLX inum=5511  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=5512  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHLX inum=5513  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHLX inum=5514  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=5515  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHLX inum 5510 -- already fine
	REARRANGE needs to juggle: SHLX inum 5511
	REARRANGE one pattern worked for SHLX inum 5511
	SKIPPING SHLX inum 5512 -- already fine
	REARRANGE needs to juggle: SHLX inum 5513
	REARRANGE one pattern worked for SHLX inum 5513
	REARRANGE needs to juggle: SHLX inum 5514
	REARRANGE one pattern worked for SHLX inum 5514
	REARRANGE needs to juggle: SHLX inum 5515
	REARRANGE one pattern worked for SHLX inum 5515
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SARX inum=5516  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SARX inum=5517  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=5518  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SARX inum=5519  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SARX inum=5520  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=5521  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SARX inum 5516 -- already fine
	REARRANGE needs to juggle: SARX inum 5517
	REARRANGE one pattern worked for SARX inum 5517
	SKIPPING SARX inum 5518 -- already fine
	REARRANGE needs to juggle: SARX inum 5519
	REARRANGE one pattern worked for SARX inum 5519
	REARRANGE needs to juggle: SARX inum 5520
	REARRANGE one pattern worked for SARX inum 5520
	REARRANGE needs to juggle: SARX inum 5521
	REARRANGE one pattern worked for SARX inum 5521
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHRX inum=5522  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHRX inum=5523  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=5524  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHRX inum=5525  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHRX inum=5526  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=5527  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHRX inum 5522 -- already fine
	REARRANGE needs to juggle: SHRX inum 5523
	REARRANGE one pattern worked for SHRX inum 5523
	SKIPPING SHRX inum 5524 -- already fine
	REARRANGE needs to juggle: SHRX inum 5525
	REARRANGE one pattern worked for SHRX inum 5525
	REARRANGE needs to juggle: SHRX inum 5526
	REARRANGE one pattern worked for SHRX inum 5526
	REARRANGE needs to juggle: SHRX inum 5527
	REARRANGE one pattern worked for SHRX inum 5527
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 22
Others: 
VPEXTRD inum=7605  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=29
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0    UIMM8()

VPEXTRD inum=7606  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8()

VPEXTRQ inum=7609  iform_input=VPEXTRQ_GPR64u64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 7605 -- already fine
	SKIPPING VPEXTRD inum 7606 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 7609
	REARRANGE one pattern worked for VPEXTRQ inum 7609
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VPEXTRD inum=7607  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=32
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8() ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()   

VPEXTRD inum=7608  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=33
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8() ESIZE_32_BITS()    NELEM_GPR_WRITER_STORE()

VPEXTRQ inum=7610  iform_input=VPEXTRQ_MEMu64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=33
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8() ESIZE_64_BITS()    NELEM_GPR_WRITER_STORE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 7607 -- already fine
	SKIPPING VPEXTRD inum 7608 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 7610
	REARRANGE one pattern worked for VPEXTRQ inum 7610
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VPINSRD inum=7625  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=26
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 ZEROING=0    MASK=0 UIMM8()

VPINSRD inum=7626  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    ZEROING=0 MASK=0 UIMM8()

VPINSRQ inum=7629  iform_input=VPINSRQ_XMMu64_XMMu64_GPR64u64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    ZEROING=0 MASK=0 UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPINSRD inum 7625 -- already fine
	SKIPPING VPINSRD inum 7626 -- already fine
	REARRANGE needs to juggle: VPINSRQ inum 7629
	REARRANGE one pattern worked for VPINSRQ inum 7629
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VPINSRD inum=7627  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=29
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    ZEROING=0 MASK=0 UIMM8() ESIZE_32_BITS()    NELEM_GPR_READER()

VPINSRD inum=7628  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 ZEROING=0 MASK=0 UIMM8()    ESIZE_32_BITS() NELEM_GPR_READER()

VPINSRQ inum=7630  iform_input=VPINSRQ_XMMu64_XMMu64_MEMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 ZEROING=0 MASK=0 UIMM8()    ESIZE_64_BITS() NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPINSRD inum 7627 -- already fine
	SKIPPING VPINSRD inum 7628 -- already fine
	REARRANGE needs to juggle: VPINSRQ inum 7630
	REARRANGE one pattern worked for VPINSRQ inum 7630
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VMOVD inum=6165  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=28
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0   

VMOVD inum=6166  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVQ inum=6205  iform_input=VMOVQ_XMMu64_GPR64u64_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6165 -- already fine
	SKIPPING VMOVD inum 6166 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6205
	REARRANGE one pattern worked for VMOVQ inum 6205
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VMOVD inum=6167  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=31
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()

VMOVD inum=6168  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()   

VMOVQ inum=6206  iform_input=VMOVQ_XMMu64_MEMu64_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_64_BITS() NELEM_GPR_READER()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6167 -- already fine
	SKIPPING VMOVD inum 6168 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6206
	REARRANGE one pattern worked for VMOVQ inum 6206
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VPBROADCASTD inum=7396  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=7397  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTQ inum=7408  iform_input=VPBROADCASTQ_XMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_128 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 7396 -- already fine
	SKIPPING VPBROADCASTD inum 7397 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 7408
	REARRANGE one pattern worked for VPBROADCASTQ inum 7408
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 22
Others: 
VPBROADCASTD inum=7400  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=7401  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTQ inum=7411  iform_input=VPBROADCASTQ_YMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_256 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 7400 -- already fine
	SKIPPING VPBROADCASTD inum 7401 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 7411
	REARRANGE one pattern worked for VPBROADCASTQ inum 7411
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 22
Others: 
VMOVD inum=6169  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0   

VMOVD inum=6170  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVQ inum=6207  iform_input=VMOVQ_GPR64u64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6169 -- already fine
	SKIPPING VMOVD inum 6170 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6207
	REARRANGE one pattern worked for VMOVQ inum 6207
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VMOVD inum=6171  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()

VMOVD inum=6172  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()   

VMOVQ inum=6208  iform_input=VMOVQ_MEMu64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_64_BITS() NELEM_GPR_WRITER_STORE()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6171 -- already fine
	SKIPPING VMOVD inum 6172 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6208
	REARRANGE one pattern worked for VMOVQ inum 6208
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
[NUMBER OF CONVERT PATTERNS] 5
FE:EMIT_FILE xed/build/obj/xed-operand-convert-init.c
emit_iclass_enum_info
FE:EMIT_FILE xed/build/obj/xed-iclass-enum.txt
FE:EMIT_FILE xed/build/obj/xed-iclass-enum.c
FE:EMIT_FILE xed/build/obj/xed-iclass-enum.h
NOREP KEYS: [102, 103, 105, 107, 279, 280, 282, 384, 385, 386, 387, 434, 435, 439, 441, 475, 476, 477, 700, 701, 702, 703, 755, 756, 757, 758]
REP KEYS: [646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679]
key - 646
h(x) = linear(x - 646)
FOUND PERFECT HASH FUNCTION FOR repinst
((11*key % 61) % 52)
x = Sigma(Ti << bit_shift)
FKS(x) = (11x mod 61) mod 52
FOUND PERFECT HASH FUNCTION FOR norepinst
FE:EMIT_FILE xed/build/obj/xed-rep-map.c
FE:EMIT_FILE xed/build/obj/xed-iform-enum.txt
FE:EMIT_FILE xed/build/obj/xed-iform-enum.c
FE:EMIT_FILE xed/build/obj/xed-iform-enum.h
FE:EMIT_FILE xed/build/obj/xed-iformfl-enum.txt
FE:EMIT_FILE xed/build/obj/xed-iformfl-enum.c
FE:EMIT_FILE xed/build/obj/xed-iformfl-enum.h
FE:EMIT_FILE xed/build/obj/xed-iform-max.c
FE:EMIT_FILE xed/build/obj/xed-iclass-string.c
[DUPLICATE IFORM] FLDENV_MEMmem14
[DUPLICATE IFORM] FLDENV_MEMmem14
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem14
[DUPLICATE IFORM] FNSTENV_MEMmem14
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FRSTOR_MEMmem94
[DUPLICATE IFORM] FRSTOR_MEMmem94
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem94
[DUPLICATE IFORM] FNSAVE_MEMmem94
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] JMP_RELBRb
[DUPLICATE IFORM] CMPXCHG8B_LOCK_MEMq
[DUPLICATE IFORM] CMPXCHG8B_MEMq
[DUPLICATE IFORM] NOP_90
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1A
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] PUSHA
[DUPLICATE IFORM] PUSHAD
[DUPLICATE IFORM] POPA
[DUPLICATE IFORM] POPAD
[DUPLICATE IFORM] BOUND_GPRv_MEMa16
[DUPLICATE IFORM] BOUND_GPRv_MEMa32
[DUPLICATE IFORM] REP_INSB
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] INSW
[DUPLICATE IFORM] INSW
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] REP_OUTSB
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] OUTSW
[DUPLICATE IFORM] OUTSW
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] JO_RELBRb
[DUPLICATE IFORM] JNO_RELBRb
[DUPLICATE IFORM] JB_RELBRb
[DUPLICATE IFORM] JNB_RELBRb
[DUPLICATE IFORM] JZ_RELBRb
[DUPLICATE IFORM] JNZ_RELBRb
[DUPLICATE IFORM] JBE_RELBRb
[DUPLICATE IFORM] JNBE_RELBRb
[DUPLICATE IFORM] JS_RELBRb
[DUPLICATE IFORM] JNS_RELBRb
[DUPLICATE IFORM] JP_RELBRb
[DUPLICATE IFORM] JNP_RELBRb
[DUPLICATE IFORM] JL_RELBRb
[DUPLICATE IFORM] JNL_RELBRb
[DUPLICATE IFORM] JLE_RELBRb
[DUPLICATE IFORM] JNLE_RELBRb
[DUPLICATE IFORM] XCHG_MEMb_GPR8
[DUPLICATE IFORM] XCHG_MEMv_GPRv
[DUPLICATE IFORM] XCHG_GPRv_OrAX
[DUPLICATE IFORM] CBW
[DUPLICATE IFORM] CBW
[DUPLICATE IFORM] CWDE
[DUPLICATE IFORM] CWDE
[DUPLICATE IFORM] CWD
[DUPLICATE IFORM] CWD
[DUPLICATE IFORM] CDQ
[DUPLICATE IFORM] CDQ
[DUPLICATE IFORM] PUSHF
[DUPLICATE IFORM] PUSHF
[DUPLICATE IFORM] PUSHFD
[DUPLICATE IFORM] PUSHFQ
[DUPLICATE IFORM] POPF
[DUPLICATE IFORM] POPF
[DUPLICATE IFORM] POPFD
[DUPLICATE IFORM] POPFQ
[DUPLICATE IFORM] REP_MOVSB
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] MOVSW
[DUPLICATE IFORM] MOVSW
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] MOVSD
[DUPLICATE IFORM] MOVSD
[DUPLICATE IFORM] REP_MOVSQ
[DUPLICATE IFORM] REPE_CMPSW
[DUPLICATE IFORM] REPE_CMPSW
[DUPLICATE IFORM] REPNE_CMPSW
[DUPLICATE IFORM] REPNE_CMPSW
[DUPLICATE IFORM] CMPSW
[DUPLICATE IFORM] CMPSW
[DUPLICATE IFORM] REPE_CMPSD
[DUPLICATE IFORM] REPE_CMPSD
[DUPLICATE IFORM] REPNE_CMPSD
[DUPLICATE IFORM] REPNE_CMPSD
[DUPLICATE IFORM] CMPSD
[DUPLICATE IFORM] CMPSD
[DUPLICATE IFORM] REP_STOSB
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] STOSW
[DUPLICATE IFORM] STOSW
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] STOSD
[DUPLICATE IFORM] STOSD
[DUPLICATE IFORM] REP_STOSQ
[DUPLICATE IFORM] REP_LODSB
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] LODSW
[DUPLICATE IFORM] LODSW
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] LODSD
[DUPLICATE IFORM] LODSD
[DUPLICATE IFORM] REP_LODSQ
[DUPLICATE IFORM] REPE_SCASW
[DUPLICATE IFORM] REPE_SCASW
[DUPLICATE IFORM] REPNE_SCASW
[DUPLICATE IFORM] REPNE_SCASW
[DUPLICATE IFORM] SCASW
[DUPLICATE IFORM] SCASW
[DUPLICATE IFORM] REPE_SCASD
[DUPLICATE IFORM] REPE_SCASD
[DUPLICATE IFORM] REPNE_SCASD
[DUPLICATE IFORM] REPNE_SCASD
[DUPLICATE IFORM] SCASD
[DUPLICATE IFORM] SCASD
[DUPLICATE IFORM] IRET
[DUPLICATE IFORM] IRET
[DUPLICATE IFORM] IRETD
[DUPLICATE IFORM] IRETD
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] JECXZ_RELBRb
[DUPLICATE IFORM] SYSENTER
[DUPLICATE IFORM] SYSEXIT
[DUPLICATE IFORM] MOVNTI_MEMd_GPR32
[DUPLICATE IFORM] MOVD_XMMdq_MEMd
[DUPLICATE IFORM] MOVD_XMMdq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_XMMd
[DUPLICATE IFORM] MOVD_GPR32_XMMd
[DUPLICATE IFORM] MOVD_MMXq_MEMd
[DUPLICATE IFORM] MOVD_MMXq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_MMXd
[DUPLICATE IFORM] MOVD_GPR32_MMXd
[DUPLICATE IFORM] PCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] BNDMOV_BND_MEMq
[DUPLICATE IFORM] BNDMOV_BND_BND
[DUPLICATE IFORM] BNDMOV_MEMq_BND
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] MOVDIR64B_GPRa_MEM
[DUPLICATE IFORM] BSF_GPRv_MEMv
[DUPLICATE IFORM] BSF_GPRv_GPRv
[DUPLICATE IFORM] BSR_GPRv_MEMv
[DUPLICATE IFORM] BSR_GPRv_GPRv
[DUPLICATE IFORM] WBINVD
[DUPLICATE IFORM] TDCALL
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] VMOVD_XMMdq_MEMd
[DUPLICATE IFORM] VMOVD_XMMdq_GPR32d
[DUPLICATE IFORM] VMOVD_MEMd_XMMd
[DUPLICATE IFORM] VMOVD_GPR32d_XMMd
[DUPLICATE IFORM] VPEXTRD_MEMd_XMMdq_IMMb
[DUPLICATE IFORM] VPEXTRD_GPR32d_XMMdq_IMMb
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_MEMd_IMMb
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_GPR32d_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PDEP_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] PDEP_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] PEXT_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] PEXT_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] ANDN_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] ANDN_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] BLSR_VGPR32d_MEMd
[DUPLICATE IFORM] BLSR_VGPR32d_VGPR32d
[DUPLICATE IFORM] BLSMSK_VGPR32d_MEMd
[DUPLICATE IFORM] BLSMSK_VGPR32d_VGPR32d
[DUPLICATE IFORM] BLSI_VGPR32d_MEMd
[DUPLICATE IFORM] BLSI_VGPR32d_VGPR32d
[DUPLICATE IFORM] BZHI_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] BZHI_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] BEXTR_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] BEXTR_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] SHLX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SHLX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] SARX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SARX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] SHRX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SHRX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] MULX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] MULX_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] RORX_VGPR32d_VGPR32d_IMMb
[DUPLICATE IFORM] RORX_VGPR32d_MEMd_IMMb
[DUPLICATE IFORM] KMOVD_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] KMOVD_GPR32u32_MASKmskw_AVX512
[DUPLICATE IFORM] VEXP2PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VEXP2PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRCP28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VRCP28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRCP28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VRCP28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VRSQRT28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VRSQRT28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRSQRT28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VRSQRT28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VADDPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VADDPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VADDSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VADDSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCMPPD_MASKmskw_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCMPPS_MASKmskw_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCMPSD_MASKmskw_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCMPSS_MASKmskw_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTDQ2PD_ZMMf64_MASKmskw_YMMi32_AVX512
[DUPLICATE IFORM] VCVTDQ2PS_ZMMf32_MASKmskw_ZMMi32_AVX512
[DUPLICATE IFORM] VCVTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTPD2PS_YMMf32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTPH2PS_ZMMf32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2PD_ZMMf64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2PH_YMMf16_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCVTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SS_XMMf32_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR64i64_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR64i64_AVX512
[DUPLICATE IFORM] VCVTSS2SD_XMMf64_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTUDQ2PD_ZMMf64_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VCVTUDQ2PS_ZMMf32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR64u64_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR64u64_AVX512
[DUPLICATE IFORM] VDIVPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VDIVPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VDIVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VDIVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFIXUPIMMPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VGETEXPPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VGETEXPPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VGETEXPSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VGETEXPSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VGETMANTPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VMAXPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMAXPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMAXSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMAXSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMINPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMINPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMINSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMINSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMOVAPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VMOVAPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_GPR32u32_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_MEMu32_AVX512
[DUPLICATE IFORM] VMOVD_GPR32u32_XMMu32_AVX512
[DUPLICATE IFORM] VMOVD_MEMu32_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_MEMu64_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_XMMu64_AVX512
[DUPLICATE IFORM] VMOVQ_MEMu64_XMMu64_AVX512
[DUPLICATE IFORM] VMOVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMOVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMOVUPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VMOVUPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMULPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMULPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMULSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMULSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_ZMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VRNDSCALEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VSCALEFPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VSCALEFPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VSCALEFSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSCALEFSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VSQRTPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VSQRTPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VSQRTSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSQRTSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VSUBPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VSUBPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VSUBSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSUBSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VUCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VUCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTQQ2PD_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VCVTTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTUQQ2PD_ZMMf64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VCVTUQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VMOVDQU16_XMMu16_MASKmskw_XMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_YMMu16_MASKmskw_YMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_ZMMu16_MASKmskw_ZMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU8_XMMu8_MASKmskw_XMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_YMMu8_MASKmskw_YMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_ZMMu8_MASKmskw_ZMMu8_AVX512
[DUPLICATE IFORM] VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VPEXTRD_MEMu32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VPEXTRW_GPR32u16_XMMu16_IMM8_AVX512_C5
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512
[DUPLICATE IFORM] VRANGEPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRANGEPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VRANGESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRANGESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VREDUCEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VREDUCEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VREDUCESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VREDUCESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
FE:EMIT_FILE xed/build/obj/idata.txt
FE:EMIT_FILE xed/build/obj/xed-iform-map-init.c
FE:EMIT_FILE xed/build/obj/xed-exception-enum.txt
FE:EMIT_FILE xed/build/obj/xed-exception-enum.c
FE:EMIT_FILE xed/build/obj/xed-exception-enum.h
[Unique Operand Sequences] 2459
[Number of required operand sequence pointers] 7727
[Number of reused operand sequence pointers] 6310
[Number of required operands] 1364
[MAX OPERAND COUNT 11] 
[INVALID WIDTH CODE]  REP    imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REP    imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  LOCK   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x4] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x5] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  IMM0SIGNED imm_const [0x1] r EXPLICIT INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x10] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x20] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x40] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x8] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x0] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar8 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar9 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArDX INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar10 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar11 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT rIPa INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar14 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar15 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar13 INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_ESI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EDI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EBP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BX] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_SI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_DI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_INVALID] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArSP INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar12 INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT SEG_MOV INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_SP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_BP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_SI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_DI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_ESP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_EBP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_ESI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_EDI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_BP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_SI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_DI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_EBP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_ESI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_EDI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_IP] rw SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_ESP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_RSP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_R INVALID
[INVALID WIDTH CODE]  BASE1  nt_lookup_fn r SUPPRESSED A_GPR_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_B INVALID
FE:EMIT_FILE xed/build/obj/xed-init-operand-data.c
FE:EMIT_FILE xed/build/obj/xed-init-operand-sequences.c
FE:EMIT_FILE xed/build/obj/xed-init-inst-table-data.c
FE:EMIT_FILE xed/build/obj/xed-init-inst-table-0.c
FE:EMIT_FILE xed/build/obj/xed-init-inst-table.c
emit_enum_info
OPERAND-NAMES SEG_OVD HINT ENCODE_FORCE LOCK NEED_MEMDISP DISP DISP_WIDTH BRDISP_WIDTH DF32 DF64 NOREX NEEDREX REX REXW REXR REXX REXB REP OSZ PREFIX66 ASZ EOSZ EASZ MOD REG SRM RM REALMODE CHIP MODE SMODE MODEP5 MODEP55C P4 LZCNT TZCNT MODE_FIRST_PREFIX MODE_SHORT_UD0 IMM0 IMM1 IMM0SIGNED UIMM0 UIMM1 IMM_WIDTH USING_DEFAULT_SEGMENT0 USING_DEFAULT_SEGMENT1 DEFAULT_SEG SEG0 BASE0 INDEX SCALE NEED_SIB SIBSCALE SIBBASE SIBINDEX SEG1 BASE1 MEM0 MEM1 MEM_WIDTH AGEN RELBR PTR REG0 REG1 REG2 REG3 REG4 REG5 REG6 REG7 REG8 REG9 OUTREG ENCODER_PREFERRED ERROR ICLASS NELEM ELEMENT_SIZE MAP OUT_OF_BYTES FIRST_F2F3 LAST_F2F3 ILD_F2 ILD_F3 MAX_BYTES ILD_SEG NSEG_PREFIXES NREXES NPREFIXES NOMINAL_OPCODE POS_NOMINAL_OPCODE HAS_MODRM HAS_SIB POS_MODRM POS_SIB POS_DISP POS_IMM POS_IMM1 IMM1_BYTES MODRM_BYTE ESRC VEXVALID DUMMY MPXMODE CET CLDEMOTE VEXDEST3 VEXDEST210 VL VEX_PREFIX VEX_C4 BCAST MUST_USE_EVEX ZEROING LLRC BCRC REXRR VEXDEST4 MASK ROUNDC SAE NO_SCALE_DISP8 UBIT WBNOINVD
FE:EMIT_FILE xed/build/obj/xed-attributes-list.c
FE:EMIT_FILE xed/build/obj/xed-nonterminal-enum.txt
FE:EMIT_FILE xed/build/obj/xed-nonterminal-enum.c
FE:EMIT_FILE xed/build/obj/xed-nonterminal-enum.h
FE:EMIT_FILE xed/build/obj/xed-operand-enum.txt
FE:EMIT_FILE xed/build/obj/xed-operand-enum.c
FE:EMIT_FILE xed/build/obj/xed-operand-enum.h
FE:EMIT_FILE xed/build/obj/xed-operand-type-enum.txt
FE:EMIT_FILE xed/build/obj/xed-operand-type-enum.c
FE:EMIT_FILE xed/build/obj/xed-operand-type-enum.h
FE:EMIT_FILE xed/build/obj/xed-attribute-enum.txt
FE:EMIT_FILE xed/build/obj/xed-attribute-enum.c
FE:EMIT_FILE xed/build/obj/xed-attribute-enum.h
FE:EMIT_FILE xed/build/obj/xed-category-enum.txt
FE:EMIT_FILE xed/build/obj/xed-category-enum.c
FE:EMIT_FILE xed/build/obj/xed-category-enum.h
FE:EMIT_FILE xed/build/obj/xed-extension-enum.txt
FE:EMIT_FILE xed/build/obj/xed-extension-enum.c
FE:EMIT_FILE xed/build/obj/xed-extension-enum.h
PREFAB-ENUM: xed/xed/datafiles/xed-syntax-enum.txt
FE:EMIT_FILE xed/build/obj/xed-syntax-enum.c
FE:EMIT_FILE xed/build/obj/xed-syntax-enum.h
PREFAB-ENUM: xed/xed/datafiles/xed-error-enum.txt
FE:EMIT_FILE xed/build/obj/xed-error-enum.c
FE:EMIT_FILE xed/build/obj/xed-error-enum.h
PREFAB-ENUM: xed/xed/datafiles/xed-flag-action-enum.txt
FE:EMIT_FILE xed/build/obj/xed-flag-action-enum.c
FE:EMIT_FILE xed/build/obj/xed-flag-action-enum.h
PREFAB-ENUM: xed/xed/datafiles/xed-reg-role.enum.txt
FE:EMIT_FILE xed/build/obj/xed-reg-role-enum.c
FE:EMIT_FILE xed/build/obj/xed-reg-role-enum.h
PREFAB-ENUM: xed/xed/datafiles/xed-operand-visibility-enum.txt
FE:EMIT_FILE xed/build/obj/xed-operand-visibility-enum.c
FE:EMIT_FILE xed/build/obj/xed-operand-visibility-enum.h
PREFAB-ENUM: xed/xed/datafiles/xed-flag-enum.txt
FE:EMIT_FILE xed/build/obj/xed-flag-enum.c
FE:EMIT_FILE xed/build/obj/xed-flag-enum.h
PREFAB-ENUM: xed/xed/datafiles/xed-machine-modes-enum.txt
FE:EMIT_FILE xed/build/obj/xed-machine-mode-enum.c
FE:EMIT_FILE xed/build/obj/xed-machine-mode-enum.h
PREFAB-ENUM: xed/xed/datafiles/xed-operand-action-enum.txt
FE:EMIT_FILE xed/build/obj/xed-operand-action-enum.c
FE:EMIT_FILE xed/build/obj/xed-operand-action-enum.h
PREFAB-ENUM: xed/xed/datafiles/xed-addr-width-enum.txt
FE:EMIT_FILE xed/build/obj/xed-address-width-enum.c
FE:EMIT_FILE xed/build/obj/xed-address-width-enum.h
FE:EMIT_FILE xed/build/obj/xed-attributes-init.c
FE:EMIT_FILE xed/build/obj/xed-gen-table-defs.h
FE:EMIT_FILE xed/build/obj/cdata.txt
FE:EMIT_FILE xed/build/obj/xed-chip-enum.txt
FE:EMIT_FILE xed/build/obj/xed-chip-enum.c
FE:EMIT_FILE xed/build/obj/xed-chip-enum.h
[FROM CHIP MODEL] ['INVALID', '3DNOW_PREFETCH', 'ADOX_ADCX', 'AES', 'AMX_BF16', 'AMX_INT8', 'AMX_TILE', 'AVX', 'AVX2', 'AVX2GATHER', 'AVX512BW_128', 'AVX512BW_128N', 'AVX512BW_256', 'AVX512BW_512', 'AVX512BW_KOP', 'AVX512CD_128', 'AVX512CD_256', 'AVX512CD_512', 'AVX512DQ_128', 'AVX512DQ_128N', 'AVX512DQ_256', 'AVX512DQ_512', 'AVX512DQ_KOP', 'AVX512DQ_SCALAR', 'AVX512ER_512', 'AVX512ER_SCALAR', 'AVX512F_128', 'AVX512F_128N', 'AVX512F_256', 'AVX512F_512', 'AVX512F_KOP', 'AVX512F_SCALAR', 'AVX512PF_512', 'AVX512_4FMAPS_512', 'AVX512_4FMAPS_SCALAR', 'AVX512_4VNNIW_512', 'AVX512_BF16_128', 'AVX512_BF16_256', 'AVX512_BF16_512', 'AVX512_BITALG_128', 'AVX512_BITALG_256', 'AVX512_BITALG_512', 'AVX512_GFNI_128', 'AVX512_GFNI_256', 'AVX512_GFNI_512', 'AVX512_IFMA_128', 'AVX512_IFMA_256', 'AVX512_IFMA_512', 'AVX512_VAES_128', 'AVX512_VAES_256', 'AVX512_VAES_512', 'AVX512_VBMI2_128', 'AVX512_VBMI2_256', 'AVX512_VBMI2_512', 'AVX512_VBMI_128', 'AVX512_VBMI_256', 'AVX512_VBMI_512', 'AVX512_VNNI_128', 'AVX512_VNNI_256', 'AVX512_VNNI_512', 'AVX512_VP2INTERSECT_128', 'AVX512_VP2INTERSECT_256', 'AVX512_VP2INTERSECT_512', 'AVX512_VPCLMULQDQ_128', 'AVX512_VPCLMULQDQ_256', 'AVX512_VPCLMULQDQ_512', 'AVX512_VPOPCNTDQ_128', 'AVX512_VPOPCNTDQ_256', 'AVX512_VPOPCNTDQ_512', 'AVXAES', 'AVX_GFNI', 'AVX_VNNI', 'BMI1', 'BMI2', 'CET', 'CLDEMOTE', 'CLFLUSHOPT', 'CLFSH', 'CLWB', 'CMOV', 'CMPXCHG16B', 'ENQCMD', 'F16C', 'FAT_NOP', 'FCMOV', 'FMA', 'FXSAVE', 'FXSAVE64', 'GFNI', 'HRESET', 'I186', 'I286PROTECTED', 'I286REAL', 'I386', 'I486', 'I486REAL', 'I86', 'INVPCID', 'KEYLOCKER', 'KEYLOCKER_WIDE', 'LAHF', 'LONGMODE', 'LZCNT', 'MONITOR', 'MOVBE', 'MOVDIR', 'MPX', 'PAUSE', 'PCLMULQDQ', 'PCONFIG', 'PENTIUMMMX', 'PENTIUMREAL', 'PKU', 'POPCNT', 'PPRO', 'PPRO_UD0_LONG', 'PPRO_UD0_SHORT', 'PREFETCHW', 'PREFETCHWT1', 'PREFETCH_NOP', 'PTWRITE', 'RDPID', 'RDPMC', 'RDRAND', 'RDSEED', 'RDTSCP', 'RDWRFSGS', 'RTM', 'SERIALIZE', 'SGX', 'SGX_ENCLV', 'SHA', 'SMAP', 'SMX', 'SSE', 'SSE2', 'SSE2MMX', 'SSE3', 'SSE3X87', 'SSE4', 'SSE42', 'SSEMXCSR', 'SSE_PREFETCH', 'SSSE3', 'SSSE3MMX', 'TDX', 'TSX_LDTRK', 'UINTR', 'VAES', 'VMFUNC', 'VPCLMULQDQ', 'VTX', 'WAITPKG', 'WBNOINVD', 'X87', 'XSAVE', 'XSAVEC', 'XSAVEOPT', 'XSAVES']
[FROM INSTRUCTIONS ] {'CLFLUSHOPT', 'AVX512F_128N', 'AVX512_VP2INTERSECT_256', 'AVX512F_KOP', 'VPCLMULQDQ', 'SERIALIZE', 'VAES', 'RDTSCP', 'RDSEED', 'AVX512_VAES_128', 'AVX512_VNNI_256', 'AVX512_VP2INTERSECT_512', 'AVX512_VBMI2_512', 'AVX512_GFNI_128', 'F16C', 'SSSE3MMX', 'SGX', 'PCLMULQDQ', 'RDRAND', 'AVX512_VBMI_256', 'PENTIUMREAL', 'XSAVEOPT', 'KEYLOCKER', 'LAHF', 'AVX512_GFNI_512', 'AVX512BW_128', 'I486', 'PKU', 'AVX512F_512', 'LZCNT', 'XSAVES', 'TSX_LDTRK', 'AVX512DQ_512', 'SSE_PREFETCH', 'FCMOV', 'AVX512_4FMAPS_512', 'VMFUNC', 'AVX512_VBMI2_256', 'AVX512_VBMI_512', 'AMX_BF16', 'X87', 'AVXAES', 'AVX512_VAES_256', 'FXSAVE', 'CET', 'ENQCMD', 'AVX512F_SCALAR', 'AVX512_VPCLMULQDQ_512', 'AVX512DQ_KOP', 'AVX_VNNI', 'AMX_INT8', 'AVX512_BF16_512', 'AVX512_VPOPCNTDQ_512', 'SMX', 'AVX512DQ_256', 'PENTIUMMMX', 'SSE4', 'AVX512BW_128N', 'FXSAVE64', 'SSEMXCSR', 'PREFETCH_NOP', 'SHA', 'MOVBE', 'PCONFIG', 'AVX_GFNI', 'CLDEMOTE', 'SSE3', 'AMX_TILE', 'I186', 'MOVDIR', 'AVX512CD_512', 'AVX512_BITALG_256', 'XSAVEC', 'SSE42', 'TDX', 'AVX512ER_512', 'SSSE3', 'BMI2', 'I386', 'CLFSH', 'AVX512_VPOPCNTDQ_128', 'AVX512BW_512', 'SGX_ENCLV', 'AES', 'AVX', 'I86', 'AVX512_BF16_128', 'SMAP', 'SSE2', 'AVX512_4FMAPS_SCALAR', 'AVX512_VPCLMULQDQ_128', 'WAITPKG', 'AVX512DQ_128N', 'RTM', 'AVX2', 'AVX512_GFNI_256', 'AVX512BW_256', 'UINTR', 'AVX512F_128', 'RDWRFSGS', 'I486REAL', 'AVX512_BITALG_512', 'AVX512_VBMI2_128', 'AVX512_VPOPCNTDQ_256', 'AVX512_IFMA_128', 'AVX512PF_512', 'AVX512_BITALG_128', 'XSAVE', 'AVX2GATHER', 'LONGMODE', 'PPRO_UD0_SHORT', 'SSE2MMX', 'KEYLOCKER_WIDE', 'PPRO_UD0_LONG', 'CMOV', 'CLWB', 'PPRO', 'AVX512_IFMA_512', 'AVX512_4VNNIW_512', 'MONITOR', 'INVPCID', 'GFNI', 'ADOX_ADCX', 'AVX512_VBMI_128', 'MPX', 'PREFETCHWT1', 'PTWRITE', 'SSE3X87', 'RDPMC', 'I286REAL', 'WBNOINVD', 'SSE', 'CMPXCHG16B', 'PAUSE', 'BMI1', 'AVX512F_256', 'VTX', 'AVX512_VPCLMULQDQ_256', 'AVX512DQ_SCALAR', 'FAT_NOP', 'AVX512_BF16_256', 'AVX512CD_128', 'AVX512_IFMA_256', 'POPCNT', 'AVX512_VAES_512', 'AVX512ER_SCALAR', 'AVX512_VNNI_128', 'AVX512BW_KOP', 'AVX512DQ_128', 'I286PROTECTED', 'FMA', 'RDPID', 'AVX512_VNNI_512', 'AVX512CD_256', 'AVX512_VP2INTERSECT_128', 'HRESET'}
FE:EMIT_FILE xed/build/obj/xed-isa-set-enum.txt
FE:EMIT_FILE xed/build/obj/xed-isa-set-enum.c
FE:EMIT_FILE xed/build/obj/xed-isa-set-enum.h
FE:EMIT_FILE xed/build/obj/xed-chip-features-table.c
FE:EMIT_FILE xed/build/obj/include-private/xed-chip-features-table.h
Created files: xed/build/obj/cdata.txt xed/build/obj/xed-chip-enum.h xed/build/obj/xed-chip-enum.c xed/build/obj/xed-isa-set-enum.h xed/build/obj/xed-isa-set-enum.c xed/build/obj/include-private/xed-chip-features-table.h xed/build/obj/xed-chip-features-table.c
FE:EMIT_FILE xed/build/obj/xed-operand-convert-enum.txt
FE:EMIT_FILE xed/build/obj/xed-operand-convert-enum.c
FE:EMIT_FILE xed/build/obj/xed-operand-convert-enum.h
FE:EMIT_FILE xed/build/obj/xed-convert-table-init.c
FE:EMIT_FILE xed/build/obj/xed-convert-table-init.h
FE:EMIT_FILE xed/build/obj/xed-operand-storage.h
FE:EMIT_FILE xed/build/obj/xed-classifiers.c
[ILD_MODRM] alias search for map legacy_map1 opcode 0x4
[ILD_MODRM] alias search for map legacy_map1 opcode 0xa
[ILD_MODRM] alias search for map legacy_map1 opcode 0xc
[ILD_MODRM] alias search for map legacy_map1 opcode 0xe
[ILD_MODRM] alias search for map legacy_map1 opcode 0xf
[ILD_MODRM] alias search for map legacy_map1 opcode 0x24
[ILD_MODRM] alias search for map legacy_map1 opcode 0x25
[ILD_MODRM] alias search for map legacy_map1 opcode 0x26
[ILD_MODRM] alias search for map legacy_map1 opcode 0x27
[ILD_MODRM] alias search for map legacy_map1 opcode 0x36
[ILD_MODRM] alias search for map legacy_map1 opcode 0x38
[ILD_MODRM] alias search for map legacy_map1 opcode 0x39
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3a
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3b
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3c
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3d
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3e
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3f
[ILD_MODRM] alias search for map legacy_map1 opcode 0x7a
[ILD_MODRM] alias search for map legacy_map1 opcode 0x7b
[ILD_MODRM] alias search for map legacy_map1 opcode 0xa6
[ILD_MODRM] alias search for map legacy_map1 opcode 0xa7
[ILD_MODRM] alias search for map vex_map1 opcode 0x0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x2
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x4 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x5
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x6
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xa = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xc = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xd
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xe
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xe = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xf
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xf = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x18
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x19
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1a
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1b
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x20
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x21
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x22
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x23
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x24
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x24 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x25
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x25 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x26
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x26 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x27
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x27 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x30
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x31
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x32
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x33
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x34
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x35
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x36
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x36 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x37
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x38
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x38 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x39
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x39 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3a
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3a = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3b
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3b = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3c
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3c = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3d
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3d = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3e
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3e = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3f
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3f = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x40
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x43
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x48
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x49
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x78
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x79
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x7a
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x7a = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x7b
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x7b = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x80
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x81
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x82
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x83
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x84
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x85
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x86
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x87
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x88
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x89
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8a
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8b
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x94
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x95
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x96
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x97
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9a
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9b
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa2
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa4
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa5
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa6
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xa6 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa7
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xa7 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xaa
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xab
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xac
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xad
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xaf
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb2
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb4
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb5
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb6
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xba
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbb
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbc
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbd
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbe
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbf
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xca
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcb
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcc
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcd
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xce
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcf
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xff
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf
[ILD_MODRM] alias search for map legacy_map0 opcode 0x26
[ILD_MODRM] alias search for map legacy_map0 opcode 0x2e
[ILD_MODRM] alias search for map legacy_map0 opcode 0x36
[ILD_MODRM] alias search for map legacy_map0 opcode 0x3e
[ILD_MODRM] alias search for map legacy_map0 opcode 0x64
[ILD_MODRM] alias search for map legacy_map0 opcode 0x65
[ILD_MODRM] alias search for map legacy_map0 opcode 0x66
[ILD_MODRM] alias search for map legacy_map0 opcode 0x67
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf0
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf2
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf3
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-modrm.h
[ILD_MODRM] aliases supplied 107
FE:EMIT_FILE xed/build/obj/ild_eosz_debug.txt
FE:EMIT_FILE xed/build/obj/ild_eosz_debug_header.txt
FE:EMIT_FILE xed/build/obj/xed-ild-eosz.c
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-eosz.h
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-eosz-getters.h
FE:EMIT_FILE xed/build/obj/ild_easz_debug.txt
FE:EMIT_FILE xed/build/obj/ild_easz_debug_header.txt
FE:EMIT_FILE xed/build/obj/xed-ild-easz.c
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-easz.h
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-easz-getters.h
FE:EMIT_FILE xed/build/obj/xed-operand-accessors.h
FE:EMIT_FILE xed/build/obj/xed-operand-accessors.c
FE:EMIT_FILE xed/build/obj/xed-ild-imm-l3.c
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-imm-l3.h
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-imm-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf6 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf7 map legacy_map0
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-imm-l1.h
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-imm-bytes.h
FE:EMIT_FILE xed/build/obj/xed-ild-disp-l3.c
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-disp-l3.h
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-disp-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe9 map legacy_map0
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-disp-l1.h
FE:EMIT_FILE xed/build/obj/include-private/xed-ild-disp-bytes.h
[ALL ZEROS] VV=0 MAP=vex_map2
[ALL ZEROS] VV=0 MAP=vex_map3
[ALL ZEROS] VV=0 MAP=evex_map2
[ALL ZEROS] VV=0 MAP=evex_map3
[ALL ZEROS] VV=0 MAP=vex_map1
[ALL ZEROS] VV=0 MAP=evex_map1
FE:EMIT_FILE xed/build/obj/include-private/xed3-phash-vv0.h
FE:EMIT_FILE xed/build/obj/xed3-phash-lu-vv0.c
FE:EMIT_FILE xed/build/obj/include-private/xed3-phash-lu-vv0.h
[ALL ZEROS] VV=1 MAP=legacy_map2
[ALL ZEROS] VV=1 MAP=legacy_map3
[ALL ZEROS] VV=1 MAP=evex_map2
[ALL ZEROS] VV=1 MAP=evex_map3
[ALL ZEROS] VV=1 MAP=legacy_map1
[ALL ZEROS] VV=1 MAP=evex_map1
[ALL ZEROS] VV=1 MAP=legacy_map0
FE:EMIT_FILE xed/build/obj/include-private/xed3-phash-vv1.h
FE:EMIT_FILE xed/build/obj/xed3-phash-lu-vv1.c
FE:EMIT_FILE xed/build/obj/include-private/xed3-phash-lu-vv1.h
[ALL ZEROS] VV=2 MAP=legacy_map2
[ALL ZEROS] VV=2 MAP=legacy_map3
[ALL ZEROS] VV=2 MAP=vex_map2
[ALL ZEROS] VV=2 MAP=vex_map3
[ALL ZEROS] VV=2 MAP=legacy_map1
[ALL ZEROS] VV=2 MAP=vex_map1
[ALL ZEROS] VV=2 MAP=legacy_map0
FE:EMIT_FILE xed/build/obj/include-private/xed3-phash-vv2.h
FE:EMIT_FILE xed/build/obj/xed3-phash-lu-vv2.c
FE:EMIT_FILE xed/build/obj/include-private/xed3-phash-lu-vv2.h
FE:EMIT_FILE xed/build/obj/include-private/xed3-operand-lu.h
FE:EMIT_FILE xed/build/obj/xed3-operand-lu.c
FE:EMIT_FILE xed/build/obj/include-private/xed3-phash.h
FE:EMIT_FILE xed/build/obj/include-private/xed3-nt-capture.h
FE:EMIT_FILE xed/build/obj/include-private/xed3-chain-capture.h
FE:EMIT_FILE xed/build/obj/include-private/xed3-chain-capture-lu.h
FE:EMIT_FILE xed/build/obj/include-private/xed3-op-chain-capture.h
FE:EMIT_FILE xed/build/obj/include-private/xed3-op-chain-capture-lu.h
FE:EMIT_FILE xed/build/obj/include-private/xed3-dynamic-part1-capture.h
FE:EMIT_FILE xed/build/obj/xed-ild-enum.c
FE:EMIT_FILE xed/build/obj/xed-ild-enum.h
FE:EMIT_FILE xed/build/obj/xed-mapu-enum.c
FE:EMIT_FILE xed/build/obj/xed-mapu-enum.h
FE:EMIT_FILE xed/build/obj/include-private/xed-map-feature-tables.h
FE:EMIT_FILE xed/build/obj/xed-cpuid-bit-enum.txt
FE:EMIT_FILE xed/build/obj/xed-cpuid-bit-enum.c
FE:EMIT_FILE xed/build/obj/xed-cpuid-bit-enum.h
ISASET:  INVALID
ISASET:  3DNOW_PREFETCH
ISASET:  ADOX_ADCX
ISASET:  AES
ISASET:  AMX_BF16
ISASET:  AMX_INT8
ISASET:  AMX_TILE
ISASET:  AVX
ISASET:  AVX2
ISASET:  AVX2GATHER
ISASET:  AVX512BW_128
ISASET:  AVX512BW_128N
ISASET:  AVX512BW_256
ISASET:  AVX512BW_512
ISASET:  AVX512BW_KOP
ISASET:  AVX512CD_128
ISASET:  AVX512CD_256
ISASET:  AVX512CD_512
ISASET:  AVX512DQ_128
ISASET:  AVX512DQ_128N
ISASET:  AVX512DQ_256
ISASET:  AVX512DQ_512
ISASET:  AVX512DQ_KOP
ISASET:  AVX512DQ_SCALAR
ISASET:  AVX512ER_512
ISASET:  AVX512ER_SCALAR
ISASET:  AVX512F_128
ISASET:  AVX512F_128N
ISASET:  AVX512F_256
ISASET:  AVX512F_512
ISASET:  AVX512F_KOP
ISASET:  AVX512F_SCALAR
ISASET:  AVX512PF_512
ISASET:  AVX512_4FMAPS_512
ISASET:  AVX512_4FMAPS_SCALAR
ISASET:  AVX512_4VNNIW_512
ISASET:  AVX512_BF16_128
ISASET:  AVX512_BF16_256
ISASET:  AVX512_BF16_512
ISASET:  AVX512_BITALG_128
ISASET:  AVX512_BITALG_256
ISASET:  AVX512_BITALG_512
ISASET:  AVX512_GFNI_128
ISASET:  AVX512_GFNI_256
ISASET:  AVX512_GFNI_512
ISASET:  AVX512_IFMA_128
ISASET:  AVX512_IFMA_256
ISASET:  AVX512_IFMA_512
ISASET:  AVX512_VAES_128
ISASET:  AVX512_VAES_256
ISASET:  AVX512_VAES_512
ISASET:  AVX512_VBMI2_128
ISASET:  AVX512_VBMI2_256
ISASET:  AVX512_VBMI2_512
ISASET:  AVX512_VBMI_128
ISASET:  AVX512_VBMI_256
ISASET:  AVX512_VBMI_512
ISASET:  AVX512_VNNI_128
ISASET:  AVX512_VNNI_256
ISASET:  AVX512_VNNI_512
ISASET:  AVX512_VP2INTERSECT_128
ISASET:  AVX512_VP2INTERSECT_256
ISASET:  AVX512_VP2INTERSECT_512
ISASET:  AVX512_VPCLMULQDQ_128
ISASET:  AVX512_VPCLMULQDQ_256
ISASET:  AVX512_VPCLMULQDQ_512
ISASET:  AVX512_VPOPCNTDQ_128
ISASET:  AVX512_VPOPCNTDQ_256
ISASET:  AVX512_VPOPCNTDQ_512
ISASET:  AVXAES
ISASET:  AVX_GFNI
ISASET:  AVX_VNNI
ISASET:  BMI1
ISASET:  BMI2
ISASET:  CET
ISASET:  CLDEMOTE
ISASET:  CLFLUSHOPT
ISASET:  CLFSH
ISASET:  CLWB
ISASET:  CMOV
ISASET:  CMPXCHG16B
ISASET:  ENQCMD
ISASET:  F16C
ISASET:  FAT_NOP
ISASET:  FCMOV
ISASET:  FMA
ISASET:  FXSAVE
ISASET:  FXSAVE64
ISASET:  GFNI
ISASET:  HRESET
ISASET:  I186
ISASET:  I286PROTECTED
ISASET:  I286REAL
ISASET:  I386
ISASET:  I486
ISASET:  I486REAL
ISASET:  I86
ISASET:  INVPCID
ISASET:  KEYLOCKER
ISASET:  KEYLOCKER_WIDE
ISASET:  LAHF
ISASET:  LONGMODE
ISASET:  LZCNT
ISASET:  MONITOR
ISASET:  MOVBE
ISASET:  MOVDIR
ISASET:  MPX
ISASET:  PAUSE
ISASET:  PCLMULQDQ
ISASET:  PCONFIG
ISASET:  PENTIUMMMX
ISASET:  PENTIUMREAL
ISASET:  PKU
ISASET:  POPCNT
ISASET:  PPRO
ISASET:  PPRO_UD0_LONG
ISASET:  PPRO_UD0_SHORT
ISASET:  PREFETCHW
ISASET:  PREFETCHWT1
ISASET:  PREFETCH_NOP
ISASET:  PTWRITE
ISASET:  RDPID
ISASET:  RDPMC
ISASET:  RDRAND
ISASET:  RDSEED
ISASET:  RDTSCP
ISASET:  RDWRFSGS
ISASET:  RTM
ISASET:  SERIALIZE
ISASET:  SGX
ISASET:  SGX_ENCLV
ISASET:  SHA
ISASET:  SMAP
ISASET:  SMX
ISASET:  SSE
ISASET:  SSE2
ISASET:  SSE2MMX
ISASET:  SSE3
ISASET:  SSE3X87
ISASET:  SSE4
ISASET:  SSE42
ISASET:  SSEMXCSR
ISASET:  SSE_PREFETCH
ISASET:  SSSE3
ISASET:  SSSE3MMX
ISASET:  TDX
ISASET:  TSX_LDTRK
ISASET:  UINTR
ISASET:  VAES
ISASET:  VMFUNC
ISASET:  VPCLMULQDQ
ISASET:  VTX
ISASET:  WAITPKG
ISASET:  WBNOINVD
ISASET:  X87
ISASET:  XSAVE
ISASET:  XSAVEC
ISASET:  XSAVEOPT
ISASET:  XSAVES
FE:EMIT_FILE xed/build/obj/xed-cpuid-tables.c
FE: Closing an already-closed file: xed/build/obj/xed-init-inst-table.c
FE:EMIT_FILE xed/build/obj/xed-flags-simple.c
FE:EMIT_FILE xed/build/obj/xed-flags-complex.c
FE:EMIT_FILE xed/build/obj/xed-flags-actions.c
FE: Closing an already-closed file: xed/build/obj/xed-operand-convert-init.c
FE: Closing an already-closed file: xed/build/obj/xed-iclass-string.c
FE: Closing an already-closed file: xed/build/obj/xed-iform-map-init.c
FE: Closing an already-closed file: xed/build/obj/xed-init-inst-table-0.c
FE: Closing an already-closed file: xed/build/obj/xed-attributes-init.c
